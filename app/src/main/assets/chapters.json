[
  {
    "id": 0,
    "color": "#1976d2",
    "name": "Java Building Blocks",
    "summary": "<p class=\"p1\">&nbsp;</p><CENTER><h1 class=\"p1\" ><strong>Chapter 1 Summary</strong></h1></CENTER><CENTER><h1 class=\"p1\" ><h2 ><strong>Java Building Blocks&nbsp;</strong></h2></CENTER><p class=\"p1\">In this chapter, you studied that Java classes consist of members called fields and methods. An<br />object is an instance of a Java class. There are three styles of comment: a single-line comment<br /><strong>(//)</strong>, a multiline comment <strong>(/* */)</strong>, and a Javadoc comment <strong>(/** */)</strong>.<br />Java begins program execution with a <strong>main()</strong> method. The most common signature for<br />this method run from the command line is <strong>public static void main(String[] args)</strong>.<br />Arguments are passed in after the class name, as in <strong>Java NameOfClass firstArgument</strong>.<br />Arguments are indexed starting with 0.</p><p class=\"p1\">Java code is organised into folders called packages. To reference classes in other packages,<br />you use an import statement. A wildcard ending an import statement means you want<br />to import all classes in that package. It does not include packages that are inside that one.<br />java.lang is a special package that does not need to be imported.</p><p class=\"p1\">Constructors create Java objects. A constructor is a method matching the class name and<br />omitting the return type. When an object is instantiated, fields and blocks of code are<br />initialized first. Then the constructor is run.</p><p class=\"p1\">Primitive types are the basic building blocks of Java types. They are assembled into<br />reference types. Reference types can have methods and be assigned to null. In addition to<br />&ldquo;normal&rdquo; numbers, numeric literals are allowed to begin with <strong>0 (octal), 0x (hex), 0X (hex),</strong><br /><strong>0b (binary), or 0B (binary)</strong>.</p><p class=\"p1\">Numeric literals are also allowed to contain underscores as long<br />as they are directly between two other numbers.<br />Declaring a variable involves stating the data type and giving the variable a name.<br />Variables that represent fields in a class are automatically initialized to their corresponding<br />&ldquo;zero&rdquo; or <strong>null</strong> value during object instantiation. Local variables must be specifically<br />initialized. Identifiers may contain letters, numbers, <strong>$, or _. Identifiers</strong> may not begin with<br />numbers.</p><p class=\"p1\">Scope refers to that portion of code where a variable can be accessed. There are three<br />kinds of variables in Java, depending on their scope: instance variables, class variables, and local variables. Instance variables are the nonstatic fields of your class. Class variables are<br />the static fields within a class. Local variables are declared within a method.</p><p class=\"p1\">For some class elements, order matters within the file. The package statement comes first<br />if present. Then comes the import statements if present. Then comes the class declaration.<br />Fields and methods are allowed to be in any order within the class.<br />Garbage collection is responsible for removing objects from memory when they can<br />never be used again. An object becomes eligible for garbage collection when there are no<br />more references to it or its references have all gone out of scope. The <strong>finalize() </strong>method<br />will run once for each object if/when it is first garbage collected.<br />Java code is object-oriented, meaning all code is defined in classes. Access modifiers<br />allow classes to encapsulate data. Java is platform independent, compiling to bytecode. It is<br />robust and simple by not providing pointers or operator overloading. Finally, Java is secure<br />because it runs inside a virtual machine.</p>",
    "questions": [
      {
        "id": 0,
        "chapterId": 0,
        "type": 2,
        "statement": "Which of the following are valid Java identifiers? (Choose all that apply)",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "A$B",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "_helloWorld",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "true",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "java.lang",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "Public",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "1980_s",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 1,
        "chapterId": 0,
        "type": 1,
        "statement": "What is the output of the following program?\n1: public class WaterBottle {\n2: private String brand;\n3: private boolean empty;\n4: public static void main(String[] args) {\n5:  WaterBottle wb = new WaterBottle();\n6:   System.out.print(\"Empty = \" + wb.empty);\n7:   System.out.print(\", Brand = \" + wb.brand);\n8: } }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "Line 6 generates a compiler error.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "Line 7 generates a compiler error.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "There is no output.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "Empty = false, Brand = null",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "Empty = false, Brand =",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "Empty = null, Brand = null",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 2,
        "chapterId": 0,
        "type": 2,
        "statement": "Which of the following are true? (Choose all that apply)\n4: short numPets = 5;\n5: int numGrains = 5.6;\n6: String name = \"Scruffy\";\n6: numPets.length();\n8: numGrains.length();\n9: name.length();",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "Line 4 generates a compiler error.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "Line 5 generates a compiler error.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "Line 6 generates a compiler error.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "Line 7 generates a compiler error.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "Line 8 generates a compiler error.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "Line 9 generates a compiler error.",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "The code compiles as is.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 3,
        "chapterId": 0,
        "type": 2,
        "statement": "Given the following class, which of the following is true? (Choose all that apply)\n1: public class Snake {\n2:  public void shed(boolean time) {\n3:    if (time) {\n4:  }\n5:    System.out.println(result);\n6:  }\n7:}",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "If String result = \"done\"; is inserted on line 2, the code will compile.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "If String result = \"done\"; is inserted on line 4, the code will compile.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "If String result = \"done\"; is inserted on line 6, the code will compile.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "If String result = \"done\"; is inserted on line 9, the code will compile.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "None of the above changes will make the code compile.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 4,
        "chapterId": 0,
        "type": 2,
        "statement": "Given the following classes, which of the following can independently replace INSERT IMPORTS HERE to make the code compile? (Choose all that apply)\n\npackage aquarium; \npublic class Tank { }\n\npackage aquarium.jellies; \npublic class Jelly { }\n\npackage visitor;\nINSERT IMPORTS HERE\npublic class AquariumVisitor {\npublic void admire(Jelly jelly) { } }",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "import aquarium.*;",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "import aquarium.*.Jelly;",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "import aquarium.jellies.Jelly;",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "import aquarium.jellies.*;",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "import aquarium.jellies.Jelly.*;",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "None of these can make the code compile.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 5,
        "chapterId": 0,
        "type": 1,
        "statement": "Given the following classes, what is the maximum number of imports that can be removed and have the code still compile?\npackage aquarium; public class Water { }\n\npackage aquarium;\nimport java.lang.*;\nimport java.lang.System; \nimport aquarium.Water; \nimport aquarium.*; \npublic class Tank {\npublic void print(Water water) { \n System.out.println(water); } }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "0",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "1",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "2",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "3",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "4",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "5",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "Does not compile.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 6,
        "chapterId": 0,
        "type": 2,
        "statement": "Given the following classes, which of the following snippets can be inserted in place of INSERT IMPORTS HERE and have the code compile? (Choose all that apply)\npackage aquarium;\npublic class Water {\n  boolean salty = false; \n}\npackage aquarium.jellies; public class Water {\n  boolean salty = true; \n}\npackage employee; \nINSERT IMPORTS HERE\npublic class WaterFiller { \n  Water water;\n}",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "import aquarium.*;",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "import aquarium.Water;\nimport aquarium.jellies.*;",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "import aquarium.*;\nimport aquarium.jellies.Water;",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "import aquarium.*;\nimport aquarium.jellies.*;",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "import aquarium.Water;\nimport aquarium.jellies.Water;",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "None of these imports can make the code compile.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 7,
        "chapterId": 0,
        "type": 2,
        "statement": "Given the following class, which of the following calls print out Blue Jay? (Choose all that apply)\npublic class BirdDisplay {\npublic static void main(String[] name) { \n  System.out.println(name[1]);\n}}",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "java BirdDisplay Sparrow Blue Jay",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "java BirdDisplay Sparrow \"Blue Jay\"",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "java BirdDisplay Blue Jay Sparrow",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "java BirdDisplay \"Blue Jay\" Sparrow",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "java BirdDisplay.class Sparrow \"Blue Jay\"",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "java BirdDisplay.class \"Blue Jay\" Sparrow",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "Does not compile.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 8,
        "chapterId": 0,
        "type": 2,
        "statement": "Which of the following legally fill in the blank so you can run the main() method from the command line? (Choose all that apply)\npublic static void main(   )",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "String[] _names",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "String[] 123",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "String abc[]",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "String _Names[]",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "String... $n",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "String names",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "None of the above.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 9,
        "chapterId": 0,
        "type": 2,
        "statement": "Which of the following are legal entry point methods that can be run from the command line? (Choose all that apply)",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "private static void main(String[] args)",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "public static final main(String[] args)",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "public void main(String[] args)",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "public static void test(String[] args)",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "public static void main(String[] args)",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "public static main(String[] args)",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "None of the above.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 10,
        "chapterId": 0,
        "type": 2,
        "statement": "Which of the following are true? (Choose all that apply)",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "An instance variable of type double defaults to null.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "An instance variable of type int defaults to null.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "An instance variable of type String defaults to null.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "An instance variable of type double defaults to 0.0.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "An instance variable of type int defaults to 0.0.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "An instance variable of type String defaults to 0.0.",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "None of the above.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 11,
        "chapterId": 0,
        "type": 2,
        "statement": "Which of the following are true? (Choose all that apply)",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "A local variable of type boolean defaults to null.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "A local variable of type float defaults to 0.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "A local variable of type Object defaults to null.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "A local variable of type boolean defaults to false.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "A local variable of type boolean defaults to true.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "A local variable of type float defaults to 0.0.",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "None of the above.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 12,
        "chapterId": 0,
        "type": 2,
        "statement": "Which of the following are true? (Choose all that apply)",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "An instance variable of type boolean defaults to false.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "An instance variable of type boolean defaults to true.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "An instance variable of type boolean defaults to null.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "An instance variable of type int defaults to 0.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "An instance variable of type int defaults to 0.0.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "An instance variable of type int defaults to null.",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "None of the above..",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 13,
        "chapterId": 0,
        "type": 2,
        "statement": "Given the following class in the file /my/directory/named/A/Bird.java: \nINSERT CODE HERE \npublic class Bird { }\nWhich of the following replaces INSERT CODE HERE if we compile from /my/directory? (Choose all that apply)",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "package my.directory.named.a;",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "package my.directory.named.A;",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "package named.a;",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "package named.A;",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "package a;",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "package A;",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "Does not compile.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 14,
        "chapterId": 0,
        "type": 2,
        "statement": "Which of the following lines of code compile? (Choose all that apply)",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "int i1 = 1_234;",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "double d1 = 1_234_.0;",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "double d2 = 1_234._0;",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "double d3 = 1_234.0_;",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "double d4 = 1_234.0;",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "None of the above.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 15,
        "chapterId": 0,
        "type": 2,
        "statement": "Given the following class, which of the following lines of code can replace INSERT CODE HERE to make the code compile? (Choose all that apply)\npublic class Price {\n  public void admission() { \n    INSERT CODE HERE\n    System.out.println(amount);\n  }}",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "int amount = 9L;",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "int amount = 0b101;",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "int amount = 0xE;",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "double amount = 0xE;",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "double amount = 1_2_.0_0;",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "int amount = 1_2_;",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "None of the above.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 16,
        "chapterId": 0,
        "type": 2,
        "statement": "Which of the following are true? (Choose all that apply)\npublic class Bunny {\n  public static void main(String[] args) { \n    Bunny bun = new Bunny();\n}}",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "Bunny is a class.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "bun is a class.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "main is a class.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "Bunny is a reference to an object.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "bun is a reference to an object.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "main is a reference to an object.",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "None of the above.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 17,
        "chapterId": 0,
        "type": 2,
        "statement": "Which represent the order in which the following statements can be assembled into a pro- gram that will compile successfully? (Choose all that apply)\nA: class Rabbit {}\nB: import java.util.*; \nC: package animals;",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "A,B,C",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "B,C,A",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "C,B,A",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "B,A",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "C,A",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "A,C",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "A,B",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 18,
        "chapterId": 0,
        "type": 2,
        "statement": "Suppose we have a class named Rabbit. Which of the following statements are true? (Choose all that apply)\n1: public class Rabbit {\n2: public static void main(String[] args) {\n3:  Rabbit one = new Rabbit();\n4:  Rabbit two = new Rabbit();\n5:  Rabbit three = one;\n6:  one = null;\n7:  Rabbit four = one;\n8:  three = null;\n9:  two = null;\n10:  two = new Rabbit();\n11: System.gc();\n} }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "The Rabbit object from line 3 is first eligible for garbage collection immediately following line 6.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "The Rabbit object from line 3 is first eligible for garbage collection immediately following line 8.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "The Rabbit object from line 3 is first eligible for garbage collection immediately following line 12.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "The Rabbit object from line 4 is first eligible for garbage collection immediately following line 9.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "The Rabbit object from line 4 is first eligible for garbage collection immediately following line 11.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "The Rabbit object from line 4 is first eligible for garbage collection immediately following line 12.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 19,
        "chapterId": 0,
        "type": 2,
        "statement": "What is true about the following code? (Choose all that apply) public class Bear {\n protected void finalize() { \n  System.out.println(\"Roar!\");\n}\n\npublic static void main(String[] args) { \n Bear bear = new Bear();\n bear = null;\n System.gc();\n}}",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "finalize() is guaranteed to be called.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "finalize() might or might not be called",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "finalize() is guaranteed not to be called.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "Garbage collection is guaranteed to run.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "Garbage collection might or might not run.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "Garbage collection is guaranteed not to run.",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "The code does not compile.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 20,
        "chapterId": 0,
        "type": 1,
        "statement": "What does the following code output?\n1: public class Salmon {\n2:  int count;\n3:  public void Salmon() {\n4:  count = 4;\n5: }\n6: public static void main(String[] args) {\n7: Salmon s = new Salmon();\n8:  System.out.println(s.count);\n9: } }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "0",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "4",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "Compilation fails on line 3.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "Compilation fails on line 4.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "Compilation fails on line 7.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "Compilation fails on line 8.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 21,
        "chapterId": 0,
        "type": 2,
        "statement": "Which of the following are true statements? (Choose all that apply)",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "Java allows operator overloading.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "Java code compiled on Windows can run on Linux.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "Java has pointers to specific locations in memory.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "Java is a procedural language.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "Java is an object-oriented language.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "Java is a functional programming language.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 22,
        "chapterId": 0,
        "type": 2,
        "statement": "Which of the following are true? (Choose all that apply)",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "javac compiles a .class file into a .java file.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "javac compiles a .java file into a .bytecode file.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "javac compiles a .java file into a .class file.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "Java takes the name of the class as a parameter.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "Java takes the name of the .bytecode file as a parameter.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "Java takes the name of the .class file as a parameter.",
            "isCorrect": true
          }
        ]
      }
    ]
  },
  {
    "id": 1,
    "color": "#00796b",
    "name": "Operators and Statements",
    "summary": "<p class=\"p1\">&nbsp;</p><CENTER><h1 class=\"p1\" ><strong>Chapter 2 Summary</strong></h1></CENTER><CENTER><h1 class=\"p1\" ><h2 ><strong>Operators and Statements&nbsp;</strong></h2></CENTER><p>This chapter cover a wide variety of topics, including dozens of Java operators, along<br />with numerous control flow statements. Many of these operators and statements may have<br />been new to you.</p><p>It is important that you understand how to use all of the required Java operators covered in this chapter and know how operator precedence influences the way a particular expression is interpreted. There will likely be numerous questions on the exam that appear to test one thing, such as <strong>StringBuilder</strong> or exception handling, when in fact the answer is related to the misuse of a particular operator that causes the application to fail to compile. When you see an operator on the exam, always check that the appropriate data types are used and<br />that they match each other where applicable.</p><p>For statements, this chapter covered two types of control structures: decision-making controls structures, including <strong>if-then</strong>, <strong>if-then-else</strong>, and <strong>switch statements</strong>, as well as repetition control structures including <strong>for</strong>, <strong>for-each</strong>,<strong> while</strong>, and do-while. Remember that most of these structures require the evaluation of a particular boolean expression either for branching decisions or once per repetition. The switch statement is the only one that supports a variety of data types, including String variables as of Java 7.</p><p>With a for-each statement you don&rsquo;t need to explicitly write a boolean expression, since the compiler builds them implicitly. For clarity, we referred to an enhanced for loop as a for-each loop, but syntactically they are written as a for statement.</p><p>We concluded this chapter by discussing advanced control options and how flow can be enhanced through nested loops, break statements, and continue statements. Be wary of questions on the exam that use nested statements, especially ones with labels, and verify they are being used correctly.</p><p>This chapter is especially important because at least one component of this chapter will likely appear in every exam question with sample code. Many of the questions on the exam focus on proper syntactic use of the structures, as they will be a large source of questions<br />that end in &ldquo;Does not compile.&rdquo; You should be able to answer all of the review questions correctly or fully understand those that you answered incorrectly before moving on to later<br />chapters.</p>",
    "questions": [
      {
        "id": 23,
        "chapterId": 1,
        "type": 2,
        "statement": "Which of the following Java operators can be used with boolean variables? (Choose all that apply)",
        "explanation": "Option A is the equality operator and can be used on numeric primitives, bool- ean values, and object references. Options B and C are both arithmetic operators and cannot be applied to a boolean value. Option D is the logical complement operator and is used exclusively with boolean values. Option E is the modulus operator, which can only be used with numeric primitives. Finally, option F is a relational operator that compares the values of two numbers.",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "==",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "+",
            "isCorrect": false
          },
          {
            "id": 2,
            "answer": "--",
            "isCorrect": false
          },
          {
            "id": 3,
            "answer": "!",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "%",
            "isCorrect": false
          },
          {
            "id": 5,
            "answer": "<=",
            "isCorrect": false
          }
        ]
      },
      {
        "id": 24,
        "chapterId": 1,
        "type": 2,
        "statement": "What data type (or types) will allow the following code snippet to compile? (Choose all that apply)\nbyte x = 5;\nbyte y = 10;\n _____ z = x + y;",
        "explanation": "The value x + y is automatically promoted to int, so int and data types that can be promoted automatically from int will work. Options A, B, D are such data types. Option C will not work because boolean is not a numeric data type. Options E and F will not work without an explicit cast to a smaller data type.",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "int",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "long",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "boolean",
            "isCorrect": false
          },
          {
            "id": 3,
            "answer": "double",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "short",
            "isCorrect": false
          },
          {
            "id": 5,
            "answer": "byte",
            "isCorrect": false
          }
        ]
      },
      {
        "id": 25,
        "chapterId": 1,
        "type": 1,
        "statement": "What is the output of the following application?\n1: public class CompareValues {\n2: public static void main(String[] args) {\n3: int x = 0;\n4: while(x++ < 10) {}\n5: String message = x > 10 ? \"Greater than\" : false;\n6: System.out.println(message+\",\"+x);\n7: }\n8: }",
        "explanation": "In this example, the ternary operator has two expressions, one of them a String and the other a boolean value. The ternary operator is permitted to have expressions that don’t have matching types, but the key here is the assignment to the String reference. The compiler knows how to assign the first expression value as a String, but the sec- ond boolean expression cannot be set as a String; therefore, this line will not compile.",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "Greater than,10",
            "isCorrect": false
          },
          {
            "id": 1,
            "answer": "false,10",
            "isCorrect": false
          },
          {
            "id": 2,
            "answer": "Greater than,11",
            "isCorrect": false
          },
          {
            "id": 3,
            "answer": "false,11",
            "isCorrect": false
          },
          {
            "id": 4,
            "answer": "The code will not compile because of line 4.",
            "isCorrect": false
          },
          {
            "id": 5,
            "answer": "The code will not compile because of line 5.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 26,
        "chapterId": 1,
        "type": 2,
        "statement": "What change would allow the following code snippet to compile? (Choose all that apply)\n3: long x = 10;\n4: int y = 2 * x;",
        "explanation": "The code will not compile as is, so option A is not correct. The value 2 * x is automatically promoted to long and cannot be automatically stored in y, which is in an int value. Options B, C, and D solve this problem by reducing the long value to int. Option E does not solve the problem and actually makes it worse by attempting to place the value in a smaller data type. Option F solves the problem by increasing the data type of the assignment so that long is allowed.",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "No change; it compiles as is.",
            "isCorrect": false
          },
          {
            "id": 1,
            "answer": "Cast x on line 4 to int.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "Change the data type of x on line 3 to short.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "Cast2 * xonline4toint.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "Change the data type of y on line 4 to short.",
            "isCorrect": false
          },
          {
            "id": 5,
            "answer": "Change the data type of y on line 4 to long.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 27,
        "chapterId": 1,
        "type": 1,
        "statement": "What is the output of the following code snippet?\n3: java.util.List<Integer> list = new java.util.ArrayList<Integer>();\n4: list.add(10);\n5: list.add(14);\n6: for(int x : list) {\n7:  System.out.print(x + \", \");\n8:  break;\n9:}",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "10, 14,",
            "isCorrect": false
          },
          {
            "id": 1,
            "answer": "10, 14",
            "isCorrect": false
          },
          {
            "id": 2,
            "answer": "10,",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "The code will not compile because of line 7.",
            "isCorrect": false
          },
          {
            "id": 4,
            "answer": "The code will not compile because of line 8.",
            "isCorrect": false
          },
          {
            "id": 5,
            "answer": "The code contains an infinite loop and does not terminate.",
            "isCorrect": false
          }
        ]
      },
      {
        "id": 28,
        "chapterId": 1,
        "type": 1,
        "statement": "What is the output of the following code snippet?\n3: int x = 4;\n4: long y = x * 4 - x++;\n5: if(y<10) System.out.println(\"Too Low\");\n6: else System.out.println(\"Just right\");\n7: else System.out.println(\"Too High\");",
        "explanation": "The code does not compile because two else statements cannot be chained together without additional if-then statements, so the correct answer is option F. Option E is incorrect as Line 6 by itself does not cause a problem, only when it is paired with Line 7. One way to fix this code so it compiles would be to add an if-then statement on line 6. The other solution would be to remove line 7.",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "Too Low",
            "isCorrect": false
          },
          {
            "id": 1,
            "answer": "Just Right",
            "isCorrect": false
          },
          {
            "id": 2,
            "answer": "Too High",
            "isCorrect": false
          },
          {
            "id": 3,
            "answer": "Compiles but throws a NullPointerException.",
            "isCorrect": false
          },
          {
            "id": 4,
            "answer": "The code will not compile because of line 6.",
            "isCorrect": false
          },
          {
            "id": 5,
            "answer": "The code will not compile because of line 7.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 29,
        "chapterId": 1,
        "type": 1,
        "statement": "What is the output of the following code?\n1: public class TernaryTester {\n2:  public static void main(String[] args) {\n3:   int x = 5;\n4:   System.out.println(x > 2 ? x < 4 ? 10 : 8 : 7);\n5: } }",
        "explanation": "As you learned in the section “Ternary Operator,” although parentheses are not required, they do greatly increase code readability, such as the following equivalent statement:\nSystem.out.println((x > 2) ? ((x < 4) ? 10 : 8) : 7)\nWe apply the outside ternary operator  rst, as it is possible the inner ternary expression may never be evaluated. Since (x>2) is true, this reduces the problem to: System.out.println((x < 4) ? 10 : 8)\nSince x is greater than 2, the answer is 8, or option D in this case.",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "5",
            "isCorrect": false
          },
          {
            "id": 1,
            "answer": "4",
            "isCorrect": false
          },
          {
            "id": 2,
            "answer": "10",
            "isCorrect": false
          },
          {
            "id": 3,
            "answer": "8",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "7",
            "isCorrect": false
          },
          {
            "id": 5,
            "answer": "The code will not compile because of line 4.",
            "isCorrect": false
          }
        ]
      },
      {
        "id": 30,
        "chapterId": 1,
        "type": 1,
        "statement": "What is the output of the following code snippet?\n3: boolean x = true, z = true;\n4: int y = 20;\n5: x = (y != 10) ^ (z=false);\n6: System.out.println(x+\", \"+y+\", \"+z);",
        "explanation": "This example is tricky because of the second assignment operator embedded in line 5. The expression (z=false) assigns the value false to z and returns false for the entire expression. Since y does not equal 10, the left-hand side returns true; therefore, the exclusive or (^) of the entire expression assigned to x is true. The output reflects these assignments, with no change to y, so option B is the only correct answer. The code compiles and runs without issue, so option F is not correct.",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "true, 10, true",
            "isCorrect": false
          },
          {
            "id": 1,
            "answer": "true, 20, false",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "false, 20, true",
            "isCorrect": false
          },
          {
            "id": 3,
            "answer": "false, 20, false",
            "isCorrect": false
          },
          {
            "id": 4,
            "answer": "false, 20, true",
            "isCorrect": false
          },
          {
            "id": 5,
            "answer": "The code will not compile because of line 5.",
            "isCorrect": false
          }
        ]
      },
      {
        "id": 31,
        "chapterId": 1,
        "type": 1,
        "statement": "How many times will the following code print \"Hello World\"?\n3: for(int i=0; i<10 ; ) {\n4: i = i++;\n5: System.out.println(\"Hello World\");\n6: }",
        "explanation": "In this example, the update statement of the for loop is missing, which is fine as the statement is optional, so option D is incorrect. The expression inside the loop incre- ments i but then assigns i the old value. Therefore, i ends the loop with the same value that it starts with: 0. The loop will repeat infinitely, outputting the same statement over and over again because i remains 0 after every iteration of the loop.",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "9",
            "isCorrect": false
          },
          {
            "id": 1,
            "answer": "10",
            "isCorrect": false
          },
          {
            "id": 2,
            "answer": "11",
            "isCorrect": false
          },
          {
            "id": 3,
            "answer": "The code will not compile because of line 3.",
            "isCorrect": false
          },
          {
            "id": 4,
            "answer": "The code will not compile because of line 5.",
            "isCorrect": false
          },
          {
            "id": 5,
            "answer": "The code contains an infinite loop and does not terminate.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 32,
        "chapterId": 1,
        "type": 1,
        "statement": "What is the output of the following code?\n3: byte a = 40, b = 50;\n4: byte sum = (byte) a + b;\n5: System.out.println(sum);",
        "explanation": "Line 4 generates a possible loss of precision compiler error. The cast operator has the highest precedence, so it is evaluated first, casting a to a byte. Then, the addition is evaluated, causing both a and b to be promoted to int values. The value 90 is an int and cannot be assigned to the byte sum without an explicit cast, so the code does not compile. The code could be corrected with parentheses around (a + b), in which case option C would be the correct answer.",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "40",
            "isCorrect": false
          },
          {
            "id": 1,
            "answer": "50",
            "isCorrect": false
          },
          {
            "id": 2,
            "answer": "90",
            "isCorrect": false
          },
          {
            "id": 3,
            "answer": "The code will not compile because of line 4.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "An undefined value.",
            "isCorrect": false
          }
        ]
      },
      {
        "id": 33,
        "chapterId": 1,
        "type": 1,
        "statement": "What is the output of the following code?\n1: public class ArithmeticSample {\n2:  public static void main(String[] args) {\n3:   int x = 5 * 4 % 3;\n4:   System.out.println(x);\n5:} }",
        "explanation": "The * and % have the same operator precedence, so the expression is evaluated from left-to-right. The result of 5 * 4 is 20, and 20 % 3 is 2 (20 divided by 3 is 18, the remainder is 2). The output is 2 and option A is the correct answer.",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "2",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "3",
            "isCorrect": false
          },
          {
            "id": 2,
            "answer": "5",
            "isCorrect": false
          },
          {
            "id": 3,
            "answer": "6",
            "isCorrect": false
          },
          {
            "id": 4,
            "answer": "The code will not compile because of line 3.",
            "isCorrect": false
          }
        ]
      },
      {
        "id": 34,
        "chapterId": 1,
        "type": 1,
        "statement": "What is the output of the following code snippet?\n3: int x = 0;\n4: String s = null;\n5: if(x == s) System.out.println(\"Success\");\n6: else System.out.println(\"Failure\");",
        "explanation": "The variable x is an int and s is a reference to a String object. The two data types are incomparable because neither variable can be converted to the other variable’s type. The compiler error occurs on line 5 when the comparison is attempted, so the answer is option D.",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "Success",
            "isCorrect": false
          },
          {
            "id": 1,
            "answer": "Failure",
            "isCorrect": false
          },
          {
            "id": 2,
            "answer": "The code will not compile because of line 4.",
            "isCorrect": false
          },
          {
            "id": 3,
            "answer": "The code will not compile because of line 5.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 144,
        "chapterId": 1,
        "type": 1,
        "statement": "What is the output of the following code snippet?\n3: int x1 = 50, x2 = 75;\n4: boolean b = x1 >= x2;\n5: if(b == true) System.out.println(\"Success\");\n6: else System.out.println(\"Failure\");",
        "explanation": "The code compiles successfully, so options C and D are incorrect. The value of b after line 4 is false. However, the if-then statement on line 5 contains an assignment, not a comparison. The variable b is assigned true on line 3, and the assignment opera- tor returns true, so line 5 executes and displays Success, so the answer is option A.",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "Success",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "Failure",
            "isCorrect": false
          },
          {
            "id": 2,
            "answer": "The code will not compile because of line 4.",
            "isCorrect": false
          },
          {
            "id": 3,
            "answer": "The code will not compile because of line 5.",
            "isCorrect": false
          }
        ]
      },
      {
        "id": 35,
        "chapterId": 1,
        "type": 1,
        "statement": "What is the output of the following code snippet? 3: int c = 7;\n4: int result = 4;\n5: result += ++c;\n6: System.out.println(result);",
        "explanation": "The code compiles successfully, so option F is incorrect. On line 5, the pre-incre- ment operator is used, so c is incremented to 4 and the new value is returned to the expression. The value of result is computed by adding 4 to the original value of 8, resulting in a new value of 12, which is output on line 6. Therefore, option C is the correct answer.",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "8",
            "isCorrect": false
          },
          {
            "id": 1,
            "answer": "11",
            "isCorrect": false
          },
          {
            "id": 2,
            "answer": "12",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "15",
            "isCorrect": false
          },
          {
            "id": 4,
            "answer": "16",
            "isCorrect": false
          },
          {
            "id": 5,
            "answer": "The code will not compile because of line 5.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 36,
        "chapterId": 1,
        "type": 1,
        "statement": "What is the output of the following code snippet?\n3: int x = 1, y = 15;\n4: while x < 10\n5:  y––;\n6:  x++;\n7: System.out.println(x+\", \"+y);",
        "explanation": "This is actually a much simpler problem than it appears to be. The while statement on line 4 is missing parentheses, so the code will not compile, and option E is the cor- rect answer. If the parentheses were added, though, option F would be the correct answer since the loop does not use curly braces to include x++ and the boolean expres- sion never changes. Finally, if curly braces were added around both expressions, the output would be 10, 6 and option B would be correct.",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "10, 5",
            "isCorrect": false
          },
          {
            "id": 1,
            "answer": "10, 6",
            "isCorrect": false
          },
          {
            "id": 2,
            "answer": "11, 5",
            "isCorrect": false
          },
          {
            "id": 3,
            "answer": "The code will not compile because of line 3.",
            "isCorrect": false
          },
          {
            "id": 4,
            "answer": "The code will not compile because of line 4.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "The code contains an infinite loop and does not terminate.",
            "isCorrect": false
          }
        ]
      },
      {
        "id": 37,
        "chapterId": 1,
        "type": 1,
        "statement": "What is the output of the following code snippet?\n3: do {\n4: int y = 1;\n5: System.out.print(y++ + \" \");\n6: } while(y <= 10);",
        "explanation": "The variable y is declared within the body of the do-while statement, so it is out of scope on line 6. Line 6 generates a compiler error, so option D is the correct answer.",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "1 2 3 4 5 6 7 8 9",
            "isCorrect": false
          },
          {
            "id": 1,
            "answer": "1 2 3 4 5 6 7 8 9 10",
            "isCorrect": false
          },
          {
            "id": 2,
            "answer": "1 2 3 4 5 6 7 8 9 10 11",
            "isCorrect": false
          },
          {
            "id": 3,
            "answer": "The code will not compile because of line 6.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "The code contains an infinite loop and does not terminate.",
            "isCorrect": false
          }
        ]
      },
      {
        "id": 38,
        "chapterId": 1,
        "type": 1,
        "statement": "What is the output of the following code snippet?\n3: boolean keepGoing = true;\n4: int result = 15, i = 10;\n5: do {\n6: i--;\n7:  if(i==8) keepGoing = false;\n8:  result -= 2;\n9: } while(keepGoing);\n10: System.out.println(result);",
        "explanation": "The code compiles without issue, so option F is incorrect. After the first execution of the loop, i is decremented to 9 and result to 13. Since i is not 8, keepGoing is false, and the loop continues. On the next iteration, i is decremented to 8 and result to 11. On the second execution, i does equal 8, so keepGoing is set to false. At the conclusion of the loop, the loop terminates since keepGoing is no longer true. The value of result is 11, and the correct answer is option D.",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "7",
            "isCorrect": false
          },
          {
            "id": 1,
            "answer": "9",
            "isCorrect": false
          },
          {
            "id": 2,
            "answer": "10",
            "isCorrect": false
          },
          {
            "id": 3,
            "answer": "11",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "15",
            "isCorrect": false
          },
          {
            "id": 5,
            "answer": "The code will not compile because of line 8.",
            "isCorrect": false
          }
        ]
      },
      {
        "id": 39,
        "chapterId": 1,
        "type": 1,
        "statement": "What is the output of the following code snippet?\n3: int count = 0;\n4: ROW_LOOP: for(int row = 1; row <=3; row++)\n5:  for(int col = 1; col <=2 ; col++) {\n6:   if(row * col % 2 == 0) continue ROW_LOOP;\n7:   count++;\n8:  }\n9: System.out.println(count);",
        "explanation": "The expression on line 5 is true when row * col is an even number. On the first iteration, row = 1 and col = 1, so the expression on line 6 is false, the continue is skipped, and count is incremented to 1. On the second iteration, row = 1 and col = 2, so the expression on line 6 is true and the continue ends the outer loop with count still at 1. On the third iteration, row = 2 and col = 1, so the expression on line 6 is true and the continue ends the outer loop with count still at 1. On the fourth iteration, row = 3 and col = 1, so the expression on line 6 is false, the continue is skipped, and count is incremented to 2. Finally, on the fifth and final iteration, row = 3 and col = 2, so the expression on line 6 is true and the continue ends the outer loop with count still at 2. The result of 2 is displayed, so the answer is option B.",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "1",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "2",
            "isCorrect": false
          },
          {
            "id": 2,
            "answer": "3",
            "isCorrect": false
          },
          {
            "id": 3,
            "answer": "4",
            "isCorrect": false
          },
          {
            "id": 4,
            "answer": "6",
            "isCorrect": false
          },
          {
            "id": 5,
            "answer": "The code will not compile because of line 6.",
            "isCorrect": false
          }
        ]
      },
      {
        "id": 40,
        "chapterId": 1,
        "type": 1,
        "statement": "What is the result of the following code snippet?\n3: int m = 9, n = 1, x = 0;\n4: while(m > n) {\n5:  m--;\n6:  n += 2;\n7:  x += m + n;\n8: }\n9 System.out.println(x);",
        "explanation": "Prior to the first iteration, m = 9, n = 1, and x = 0. After the iteration of the first loop, m is updated to 8, n to 3, and x to the sum of the new values for m + n, 0 + 11 = 11. After the iteration of the second loop, m is updated to 7, n to 5, and x to the sum of the new values for m + n, 11 + 12 = 23. After the iteration of the third loop, m is updated to 6, n to 7, and x to the sum of the new values for m + n, 23 + 13 = 36. On the fourth iteration of the loop, m > n evaluates to false, as 6 < 7 is not true. The loop ends and the most recent value of x, 36, is output, so the correct answer is option D.",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "11",
            "isCorrect": false
          },
          {
            "id": 1,
            "answer": "13",
            "isCorrect": false
          },
          {
            "id": 2,
            "answer": "23",
            "isCorrect": false
          },
          {
            "id": 3,
            "answer": "36",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "50",
            "isCorrect": false
          },
          {
            "id": 5,
            "answer": "The code will not compile because of line 7.",
            "isCorrect": false
          }
        ]
      },
      {
        "id": 41,
        "chapterId": 1,
        "type": 1,
        "statement": "What is the result of the following code snippet? 3: final char a = 'A', d = 'D';\n4: char grade = 'B';\n5: switch(grade) {\n6:  case a:\n7:  case 'B': System.out.print(\"great\");\n8:  case 'C': System.out.print(\"good\"); break;\n9:  case d:\n10:  case 'F': System.out.print(\"not good\");\n11: }",
        "explanation": "The code compiles and runs without issue,so options C,D,and E are not correct.The value of grade is 'B' and there is a matching case statement that will cause \"great\" to be printed. There is no break statement after the case, though, so the next case state- ment will be reached, and \"good\" will be printed. There is a break after this case state- ment, though, so the switch statement will end. The correct answer is thus option B.",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "great",
            "isCorrect": false
          },
          {
            "id": 1,
            "answer": "greatgood",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "The code will not compile because of line 3.",
            "isCorrect": false
          },
          {
            "id": 3,
            "answer": "The code will not compile because of line 6.",
            "isCorrect": false
          },
          {
            "id": 4,
            "answer": "The code will not compile because of lines 6 and 9.",
            "isCorrect": false
          }
        ]
      }
    ]
  },
  {
    "id": 2,
    "color": "#fbc02d",
    "name": "Core Java APIs",
    "summary": "<p class=\"p1\">&nbsp;</p><CENTER><h1 class=\"p1\" ><strong>Chapter 3 Summary</strong></h1></CENTER><CENTER><h1 class=\"p1\" ><h2 ><strong>Core Java APIs&nbsp;</strong></h2></CENTER><p>In this chapter, you learned that Strings are immutable sequences of characters. The new operator is optional. The concatenation <strong>operator (+)</strong> creates a new String with the content of the first String followed by the content of the second String. If either operand involved in the + expression is a String, concatenation is used; otherwise, addition is used. <br />String literals are stored in the string pool. The String class has many methods. You need to know <strong>charAt()</strong>, <strong>concat()</strong>, <strong>endsWith()</strong>, <strong>equals()</strong>, <strong>equalsIgnoreCase()</strong>,<strong> indexOf()</strong>, <strong>length()</strong>, <strong>replace()</strong>, <strong>startsWith()</strong>, <strong>substring()</strong>, <strong>toLowerCase()</strong>, <strong>toUpperCase()</strong>, and <strong>trim()</strong>.</p><p>StringBuilders are mutable sequences of characters. Most of the methods return a reference to the current object to allow method chaining. The StringBuilder class has many methods. You need to know <strong>append()</strong>, <strong>charAt()</strong>, <strong>delete()</strong>, <strong>deleteCharAt()</strong>,<strong> indexOf()</strong>, <strong>insert()</strong>, <strong>length()</strong>, <strong>reverse()</strong>, <strong>substring()</strong>, and <strong>toString()</strong>. StringBuffer is the same as StringBuilder except that it is thread safe.</p><p>Calling<strong> ==</strong> on String objects will check whether they point to the same object in the pool. Calling <strong>==</strong> on StringBuilder references will check whether they are pointing to the same StringBuilder object. Calling<strong> equals()</strong> on String objects will check whether the sequence of characters is the same. Calling<strong> equals()</strong> on StringBuilder objects will check whether they are pointing to the same object rather than looking at the values inside.<br />An array is a <strong>fixed-size</strong> area of memory on the heap that has space for primitives or pointers to objects. You specify the size when creating <strong>it&mdash;for example, int[] a = new int[6]</strong>;. Indexes begin with 0 and elements are referred to using a[0]. The <strong>Arrays.sort()</strong> method sorts an array. <strong>Arrays.binarySearch()</strong> searches a sorted array and returns the index of a match. If no match is found, it negates the position where the element would need to be inserted and subtracts 1. Methods that are passed <strong>varargs (&hellip;)</strong> can be used as if a normal array was passed in. In a multidimensional array, the second-level arrays and beyond can be different sizes.</p><p>An ArrayList can change size over its life. It can be stored in an ArrayList or List reference. Generics can specify the type that goes in the ArrayList. You need to know the methods <strong>add()</strong>, <strong>clear()</strong>, <strong>contains()</strong>, <strong>equals()</strong>, <strong>isEmpty()</strong>, <strong>remove()</strong>,<strong> set()</strong>, and <strong>size()</strong>. <br />Although an ArrayList is not allowed to contain primitives, Java will <strong>autobox</strong> parameters passed into the proper wrapper type. <strong>Collections.sort()</strong> sorts an <strong>ArrayList</strong>.<br />A LocalDate contains just a date, a LocalTime contains just a time, and a LocalDateTime contains both a date and time. All three have private constructors and are created using <strong>LocalDate.now()</strong> or <strong>LocalDate.of()</strong> (or the equivalents for that class). Dates and times can be manipulated using <strong>plusXXX</strong> or <strong>minusXXX</strong> methods. The Period class represents a number of days, months, or years to add or subtract from a <strong>LocalDate</strong> or <strong>LocalDateTime</strong>.<br />DateTimeFormatter is used to output dates and times in the desired format. The date and time classes are all immutable, which means the return value must be used.</p>",
    "questions": [
      {
        "id": 42,
        "chapterId": 2,
        "type": 1,
        "statement": "What is output by the following code? (Choose all that apply)\n1: public class Fish {\n2:  public static void main(String[] args) {\n3:   int numFish = 4;\n4:   String fishType = \"tuna\";\n5:   String anotherFish = numFish + 1;\n6:   System.out.println(anotherFish + \" \" + fishType);\n7:   System.out.println(numFish + \" \" + 1);\n8:} }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "4 1",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "41",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "5",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "5 tuna",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "5tuna",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "51tuna",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "The code does not compile",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 43,
        "chapterId": 2,
        "type": 2,
        "statement": "Which of the following are output by this code? (Choose all that apply) \n3: String s = \"Hello\";\n4: String t = new String(s);\n5: if (\"Hello\".equals(s)) System.out.println(\"one\");\n6: if (t == s) System.out.println(\"two\");\n7: if (t.equals(s)) System.out.println(\"three\"); \n8: if (\"Hello\" == s) System.out.println(\"four\"); \n9: if (\"Hello\" == t) System.out.println(\"five\");",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "one",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "two",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "three",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "four",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "five",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "The code does not compile.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 44,
        "chapterId": 2,
        "type": 2,
        "statement": "Which are true statements? (Choose all that apply)",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "An immutable object can be modified.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "An immutable object cannot be modified.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "An immutable object can be garbage collected.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "An immutable object cannot be garbage collected.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "String is immutable.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "StringBuffer is immutable.",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "StringBuilder is immutable.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 45,
        "chapterId": 2,
        "type": 1,
        "statement": "What is the result of the following code?\n7: StringBuilder sb = new StringBuilder();\n8: sb.append(\"aaa\").insert(1, \"bb\").insert(4, \"ccc\");\n9: System.out.println(sb);",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "abbaaccc",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "abbaccca",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "bbaaaccc",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "bbaaccca",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "An exception is thrown.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "The code does not compile.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 46,
        "chapterId": 2,
        "type": 1,
        "statement": "What is the result of the following code?\n2: String s1 = \"java\";\n3: StringBuilder s2 = new StringBuilder(\"java\"); \n4: if (s1 == s2)\n5: System.out.print(\"1\"); 6: if (s1.equals(s2))\n7: System.out.print(\"2\");",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "1",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "2",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "12",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "No output is printed.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "An exception is thrown.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "The code does not compile.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 47,
        "chapterId": 2,
        "type": 1,
        "statement": "What is the result of the following code? public \nclass Lion {\npublic void roar(String roar1, StringBuilder roar2) { \nroar1.concat(\"!!!\");\nroar2.append(\"!!!\");\n}\npublic static void main(String[] args) {\nString roar1 = \"roar\";\nStringBuilder roar2 = new StringBuilder(\"roar\");\nnew Lion().roar(roar1, roar2);\nSystem.out.println(roar1 + \" \" + roar2); \n}}",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "roar roar",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "roar roar!!!",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "roar!!! roar",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "roar!!! roar!!!",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "An exception is thrown.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "The code does not compile.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 48,
        "chapterId": 2,
        "type": 1,
        "statement": "Which are the results of the following code? (Choose all that apply)\nString letters = \"abcdef\"; \nSystem.out.println(letters.length()); \nSystem.out.println(letters.charAt(3)); \nSystem.out.println(letters.charAt(6));",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "5",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "6",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "c",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "d",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "An exception is thrown.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "The code does not compile.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 49,
        "chapterId": 2,
        "type": 1,
        "statement": "Which are the results of the following code? (Choose all that apply) \nString numbers = \"012345678\"; \nSystem.out.println(numbers.substring(1, 3)); \nSystem.out.println(numbers.substring(7, 7)); \nSystem.out.println(numbers.substring(7));",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "12",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "123",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "7",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "78",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "A blank line.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "An exception is thrown.",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "The code does not compile.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 50,
        "chapterId": 2,
        "type": 1,
        "statement": "What is the result of the following code? \n3: String s = \"purr\";\n4: s.toUpperCase();\n5: s.trim();\n6: s.substring(1, 3);\n7: s += \" two\"; \n8: System.out.println(s.length());",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "2",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "4",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "8",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "10",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "An exception is thrown.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "The code does not compile.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 51,
        "chapterId": 2,
        "type": 1,
        "statement": "What is the result of the following code? (Choose all that apply)\n13: String a = \"\"; \n14: a += 2;\n15: a += 'c';\n16: a += false;\n17: if ( a == \"2cfalse\") System.out.println(\"==\");\n18: if ( a.equals(\"2cfalse\")) System.out.println(\"equals\");",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "Compile error on line 14.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "Compile error on line 15.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "Compile error on line 16.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "Compile error on another line.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "==",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "equals",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "An exception is thrown.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 52,
        "chapterId": 2,
        "type": 1,
        "statement": "What is the result of the following code?\n4: int total = 0;\n5: StringBuilder letters = new StringBuilder(\"abcdefg\");\n6: total += letters.substring(1, 2).length();\n7: total += letters.substring(6, 6).length();\n8: total += letters.substring(6, 5).length();\n9: System.out.println(total);",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "1",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "2",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "3",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "7",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "An exception is thrown.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "The code does not compile.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 53,
        "chapterId": 2,
        "type": 1,
        "statement": "What is the result of the following code? (Choose all that apply)\nStringBuilder numbers = new StringBuilder(\"0123456789\");\nnumbers.delete(2, 8);\nnumbers.append(\"-\").insert(2, \"+\");\nSystem.out.println(numbers);",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "01+89–",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "012+9–",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "012+–9",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "0123456789",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "An exception is thrown.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "The code does not compile.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 54,
        "chapterId": 2,
        "type": 1,
        "statement": "What is the result of the following code?\nStringBuilder b = \"rumble\";\nb.append(4).deleteCharAt(3).delete(3, b.length() - 1);\nSystem.out.println(b);",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "rum",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "rum4",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "rumb4",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "rumble4",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "An exception is thrown.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "The code does not compile.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 55,
        "chapterId": 2,
        "type": 2,
        "statement": "Which of the following can replace line 4 to print \"avaJ\"? (Choose all that apply)\n3: StringBuilder puzzle = new StringBuilder(\"Java\");\n4: // INSERT CODE HERE\n5: System.out.println(puzzle);",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "puzzle.reverse();",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "puzzle.append(\"vaJ$\").substring(0, 4);",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "puzzle.append(\"vaJ$\").delete(0, 3).deleteCharAt(puzzle.length() - 1);",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "puzzle.append(\"vaJ$\").delete(0, 3).deleteCharAt(puzzle.length());",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "None of the above.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 56,
        "chapterId": 2,
        "type": 2,
        "statement": "Which of these array declarations is not legal? (Choose all that apply)",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "int[][] scores = new int[5][];",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "Object[][][] cubbies = new Object[3][0][5];",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "String beans[] = new beans[6];",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "java.util.Date[] dates[] = new java.util.Date[2][];",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "int[][] types = new int[];",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "int[][] java = new int[][];",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 57,
        "chapterId": 2,
        "type": 1,
        "statement": "Which of these compile when replacing line 8? (Choose all that apply)\n7: char[]c = new char[2];\n8: // INSERT CODE HERE",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "int length = c.capacity;",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "int length = c.capacity();",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "int length = c.length;",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "int length = c.length();",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "int length = c.size;",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "int length = c.size();",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "None of the above.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 58,
        "chapterId": 2,
        "type": 2,
        "statement": "Which of these compile when replacing line 8? (Choose all that apply)\n7: ArrayList l = new ArrayList();\n8: // INSERT CODE HERE",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "int length = l.capacity;",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "int length = l.capacity();",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "int length = l.length;",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "int length = l.length();",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "int length = l.size;",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "int length = l.size();",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "None of the above.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 59,
        "chapterId": 2,
        "type": 2,
        "statement": "Which of the following are true? (Choose all that apply)",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "An array has a fixed size.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "An ArrayList has a fixed size.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "An array allows multiple dimensions.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "An array is ordered.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "An ArrayList is ordered.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "An array is immutable.",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "An ArrayList is immutable.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 60,
        "chapterId": 2,
        "type": 2,
        "statement": "Which of the following are true? (Choose all that apply)",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "Two arrays with the same content are equal.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "Two ArrayLists with the same content are equal.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "If you call remove(0) using an empty ArrayList object, it will compile successfully.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "If you call remove(0) using an empty ArrayList object, it will run successfully.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "None of the above.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 61,
        "chapterId": 2,
        "type": 1,
        "statement": "What is the result of the following statements?\n6: List<String> list = new ArrayList<String>(); 7: list.add(\"one\");\n8: list.add(\"two\");\n9: list.add(7);\n10: for(String s : list) System.out.print(s);",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "onetwo",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "onetwo7",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "onetwo followed by an exception",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "Compiler error on line 9.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "Compiler error on line 10.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 62,
        "chapterId": 2,
        "type": 1,
        "statement": "What is the result of the following statements?\n3: ArrayList<Integer> values = new ArrayList<>();4: values.add(4);\n5: values.add(5);\n6: values.set(1, 6);\n7: values.remove(0);\n8: for (Integer v : values) System.out.print(v);",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "4",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "5",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "6",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "46",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "45",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "An exception is thrown.",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "The code does not compile.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 63,
        "chapterId": 2,
        "type": 1,
        "statement": "What is the result of the following?\nint[] random = { 6, -4, 12, 0, -10 }; \nint x = 12;\nint y = Arrays.binarySearch(random, x); \nSystem.out.println(y);",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "2",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "4",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "6",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "The result is undefined.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "An exception is thrown.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "The code does not compile.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 64,
        "chapterId": 2,
        "type": 1,
        "statement": "What is the result of the following?\n4: List<Integer> list = Arrays.asList(10, 4, -1, 5);\n5: Collections.sort(list);\n6: Integer array[] = list.toArray(new Integer[4]);\n7: System.out.println(array[0]);",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "-1",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "10",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "Compiler error on line 4.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "Compiler error on line 5.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "Compiler error on line 6.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "An exception is thrown.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 65,
        "chapterId": 2,
        "type": 1,
        "statement": "What is the result of the following?\n6: String [] names = {\"Tom\", \"Dick\", \"Harry\"};\n7: List<String> list = names.asList();\n8: list.set(0, \"Sue\");\n9: System.out.println(names[0]);",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "Sue",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "Tom",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "Compiler error on line 7.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "Compiler error on line 8.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "An exception is thrown.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 66,
        "chapterId": 2,
        "type": 1,
        "statement": "What is the result of the following?\nList<String> hex = Arrays.asList(\"30\", \"8\", \"3A\", \"FF\");\nCollections.sort(hex);\nint x = Collections.binarySearch(hex, \"8\");\nint y = Collections.binarySearch(hex, \"3A\");\nint z = Collections.binarySearch(hex, \"4F\");\nSystem.out.println(x + \" \" + y + \" \" + z);",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "0 1 –2",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "0 1 –3",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "2 1 –2",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "2 1 –3",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "None of the above.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "The code doesn’t compile.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 67,
        "chapterId": 2,
        "type": 2,
        "statement": "Which of the following are true statements about the following code? (Choose all that apply)\n4: List<Integer> ages = new ArrayList<>();\n5: ages.add(Integer.parseInt(\"5\"));\n6: ages.add(Integer.valueOf(\"6\"));\n7: ages.add(7);\n8: ages.add(null);\n9: for (int age : ages) System.out.print(age);",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "The code compiles.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "The code throws a runtime exception.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "Exactly one of the add statements uses autoboxing.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "Exactly two of the add statements use autoboxing.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "Exactly three of the add statements use autoboxing.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 68,
        "chapterId": 2,
        "type": 1,
        "statement": "What is the result of the following?\nList<String> one = new ArrayList<String>();\none.add(\"abc\");\nList<String> two = new ArrayList<>();\ntwo.add(\"abc\");\nif (one == two)\nSystem.out.println(\"A\");\nelse if (one.equals(two))\nSystem.out.println(\"B\"); else\nSystem.out.println(\"C\");",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "A",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "B",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "C",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "An exception is thrown.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "The code does not compile.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 69,
        "chapterId": 2,
        "type": 2,
        "statement": "Which of the following can be inserted into the blank to create a date of June 21, 2014? (Choose all that apply)\n\nimport java.time.*;\n\npublic class StartOfSummer {\n\n  public static void main(String[] args) { \n  LocalDate date = ____________________________ \n  }\n}",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "new LocalDate(2014, 5, 21);",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "new LocalDate(2014, 6, 21);",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "LocalDate.of(2014, 5, 21);",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "LocalDate.of(2014, 6, 21);",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "LocalDate.of(2014, Calendar.JUNE, 21);",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "LocalDate.of(2014, Month.JUNE, 21);",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 70,
        "chapterId": 2,
        "type": 1,
        "statement": "What is the output of the following code?\nLocalDate date = LocalDate.parse(\"2018-04-30\", DateTimeFormatter.ISO_LOCAL_DATE);\ndate.plusDays(2);\ndate.plusHours(3);\nSystem.out.println(date.getYear() + \" \" + date.getMonth() + \" \" + date.getDayOfMonth());",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "2018 APRIL 2",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "2018 APRIL 30",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "2018 MAY 2",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "The code does not compile.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "A runtime exception is thrown.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 71,
        "chapterId": 2,
        "type": 1,
        "statement": "What is the output of the following code? \nLocalDate date = LocalDate.of(2018, Month.APRIL, 40); \nSystem.out.println(date.getYear() + \" \" + date.getMonth() + \" \" + date.getDayOfMonth());",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "2018 APRIL 4",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "2018 APRIL 30",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "2018 MAY 10",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "Another date.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "The code does not compile.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "A runtime exception is thrown.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 72,
        "chapterId": 2,
        "type": 1,
        "statement": "Whatistheoutputofthefollowingcode? \nLocalDate date = LocalDate.of(2018, Month.APRIL, 30); \ndate.plusDays(2); \ndate.plusYears(3); \nSystem.out.println(date.getYear() + \" \" + date.getMonth() + \" \" + date.getDayOfMonth());",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "2018 APRIL 2",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "2018 APRIL 30",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "2018 MAY 2",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "2021 APRIL 2",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "2021 APRIL 30",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "2021 MAY 2",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "A runtime exception is thrown.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 73,
        "chapterId": 2,
        "type": 1,
        "statement": "What is the output of the following code?\nLocalDateTime d = LocalDateTime.of(2015, 5, 10, 11, 22, 33);\nPeriod p = Period.of(1, 2, 3);\nd = d.minus(p);\nDateTimeFormatter f = DateTimeFormatter.ofLocalizedTime(FormatStyle.SHORT);\nSystem.out.println(d.format(f));",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "3/7/14 11:22 AM",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "5/10/15 11:22 AM",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "3/7/14",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "5/10/15",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "11:22 AM",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "The code does not compile.",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "A runtime exception is thrown.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 74,
        "chapterId": 2,
        "type": 1,
        "statement": "What is the output of the following code?\nLocalDateTime d = LocalDateTime.of(2015, 5, 10, 11, 22, 33);\nPeriod p = Period.ofDays(1).ofYears(2);\nd = d.minus(p);\nDateTimeFormatter f = DateTimeFormatter.ofLocalizedDateTime(FormatStyle .SHORT);\nSystem.out.println(f.format(d));",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "5/9/13 11:22 AM",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "5/10/13 11:22 AM",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "5/9/14",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "5/10/14",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "The code does not compile.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "A runtime exception is thrown.",
            "isCorrect": true
          }
        ]
      }
    ]
  },
  {
    "id": 3,
    "color": "#e64a19",
    "name": "Methods and Encapsulation",
    "summary": "<p class=\"p1\">&nbsp;</p><CENTER><h1 class=\"p1\" ><strong>Chapter 4 Summary</strong></h1></CENTER><CENTER><h1 class=\"p1\" ><h2 ><strong>Methods and Encapsulation&nbsp;</strong></h2></CENTER><p>As you learned in this chapter, Java methods start with an access modifier of <strong>public</strong>, <strong>private</strong>, <strong>protected</strong> or blank (default access). This is followed by an optional specifier such as static, final, or abstract. Next, comes the return type, which is void or a Java type.<br />The method name follows, using standard Java identifier rules. Zero or more parameters go in parentheses as the parameter list. Next come any optional exception types. Finally, zero or more statements go in braces to make up the method body.<br />Using the <strong>private</strong> keyword means the code is only available from within the same class.Default <strong>(package private)</strong> access means the code is only available from within the same package. Using the protected keyword means the code is available from the same package or subclasses. Using the <strong>public</strong> keyword means the code is available from anywhere. <strong>Static methods and static variables</strong> are shared by the <strong>class</strong>. When referenced from outside the class, they are called using the classname&mdash;for example, <strong>StaticClass.method()</strong>. Instance members are allowed to call static members, but static members are not allowed to call instance members. Static imports are used to import static members. Java uses pass-by-value, which means that calls to methods create a copy of the parameters. Assigning new values to those parameters in the method doesn&rsquo;t affect the caller&rsquo;s variables.<br />Calling methods on objects that are method parameters changes the state of those objects and is reflected in the caller. <br />Overloaded methods are methods with the same name but a different parameter list.<br />Java calls the most specific method it can find. Exact matches are preferred, followed by wider primitives. After that comes autoboxing and finally <strong>varargs</strong>.<br />Constructors are used to instantiate new objects. The default no-argument constructor is called when no constructor is coded. Multiple constructors are allowed and can call each other by writing <strong>this()</strong>. If<strong> this()</strong> is present, it must be the first statement in the constructor.<br />Constructors can refer to instance variables by writing this before a variable name to indicate they want the instance variable and not the method parameter with that name. The order of initialization is the superclass (which we will cover in Chapter 5); <strong>static variables and static&nbsp;</strong>initializers in the order they appear; instance variables and instance initializers in the order they appear, and finally the constructor.<br />Encapsulation refers to preventing callers from changing the instance variables directly. This is done by making instance variables private and getters/setters public. Immutability refers to preventing callers from changing the instance variables at all. This uses several techniques, including removing setters. JavaBeans use methods beginning with is and get for boolean and non-boolean property types, respectively. Methods beginning with set are used for setters. <br /><strong>Lambda</strong> expressions, or lambdas, allow passing around blocks of code. The full syntax looks like <strong>(String a, String b) -&gt; { return a.equals(b); }</strong>. The parameter types can be omitted. When only one parameter is specified without a type, the parentheses can also be omitted. The braces and return statement can be omitted for a single statement, making the short form <strong>(a -&gt; a.equals(b)</strong>. Lambdas are passed to a method expecting an interface<br />with one method. The predicate is a common interface. It has one method named test that returns a boolean and takes any type. The <strong>removeIf()</strong> method on ArrayList takes a <strong>Predicate</strong>.</p> ",
    "questions": [
      {
        "id": 75,
        "chapterId": 3,
        "type": 2,
        "statement": "Which of the following can fill in the blank in this code to make it compile? (Choose all that apply)\npublic class Ant {\n _____ void method() { }\n}",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "default",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "final",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "private",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "Public",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "String",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "zzz:",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 76,
        "chapterId": 3,
        "type": 2,
        "statement": "Which of the following compile? (Choose all that apply)",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "final static void method4() { }",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "public final int void method() { }",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "private void int method() { }",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "static final void method3() { }",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "void final method() {}",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "void public method() { }",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 77,
        "chapterId": 3,
        "type": 2,
        "statement": "Which of the following methods compile? (Choose all that apply)",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "public void methodA() { return;}",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "public void methodB() { return null;}",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "public void methodD() {}",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "public int methodD() { return 9;}",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "public int methodE() { return 9.0;}",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "public int methodF() { return;}",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "public int methodG() { return null;}",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 78,
        "chapterId": 3,
        "type": 2,
        "statement": "Which of the following compile? (Choose all that apply)",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "public void moreA(int... nums) {}",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "public void moreB(String values, int... nums) {}",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "public void moreC(int... nums, String values) {}",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "public void moreD(String... values, int... nums) {}",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "public void moreE(String[] values, ...int nums) {}",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "public void moreF(String... values, int[] nums) {}",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "public void moreG(String[] values, int[] nums) {}",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 79,
        "chapterId": 3,
        "type": 2,
        "statement": "Given the following method, which of the method calls return 2? (Choose all that apply) \npublic int howMany(boolean b, boolean... b2) {\n  return b2.length; \n}",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "howMany();",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "howMany(true);",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "howMany(true, true);",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "howMany(true, true, true);",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "howMany(true, {true});",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "howMany(true, {true, true});",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "howMany(true, new boolean[2]);",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 80,
        "chapterId": 3,
        "type": 2,
        "statement": "Which of the following are true? (Choose all that apply)",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "Package private access is more lenient than protected access.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "A public class that has private fields and package private methods is not visible to classes outside the package.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "You can use access modifiers so only some of the classes in a package see a particular package private class.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "You can use access modifiers to allow read access to all methods, but not any instance variables.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "You can use access modifiers to restrict read access to all classes that begin with the word Test.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 81,
        "chapterId": 3,
        "type": 2,
        "statement": "Given the following my.school.ClassRoom and my.city.School class definitions, which line numbers in main() generate a compiler error? (Choose all that apply)\n1: package my.school;\n2: public class Classroom {\n3:   private int roomNumber;\n4:   protected String teacherName;\n5:   static int globalKey = 54321;\n6:   public int floor = 3;\n7:   Classroom(int r, String t) {\n8:     roomNumber = r;\n9:     teacherName = t; } }\n\n1: package my.city;\n2: import my.school.*;\n3: public class School {\n4: public static void main(String[] args) {\n5:   System.out.println(Classroom.globalKey);\n6:   Classroom room = new Classroom(101, \"\"Mrs. Anderson\");\n7:   System.out.println(room.roomNumber);\n8:   System.out.println(room.floor);\n9:   System.out.println(room.teacherName); } }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "None, the code compiles fine.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "Line 5",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "Line 6",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "Line 7",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "Line 8",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "Line 9",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 82,
        "chapterId": 3,
        "type": 2,
        "statement": "Which of the following are true? (Choose all that apply)",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "Encapsulation uses package private instance variables.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "Encapsulation uses private instance variables.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "Encapsulation allows setters.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "Immutability uses package private instance variables.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "Immutability uses private instance variables.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "Immutability allows setters.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 83,
        "chapterId": 3,
        "type": 2,
        "statement": "Which are methods using JavaBeans naming conventions for accessors and mutators? (Choose all that apply)",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "public boolean getCanSwim() { return canSwim;}",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "public boolean canSwim() { return numberWings;}",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "public int getNumWings() { return numberWings;}",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "public int numWings() { return numberWings;}",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "public void setCanSwim(boolean b) { canSwim = b;}",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 84,
        "chapterId": 3,
        "type": 1,
        "statement": "What is the output of the following code?\n1: package rope;\n2: public class Rope {\n3:   public static int LENGTH = 5;\n4:   static {\n5:     LENGTH = 10; \n6:   }\n7:   public static void swing() { \n8:     System.out.print(\"swing\"); \n9:   }\n10: }\n\n1: import rope.*;\n2: import static rope.Rope.*;\n3: public class Chimp {\n4:   public static void main(String[] args) {\n5:     Rope.swing();\n6:     new Rope().swing();\n7:     System.out.println(LENGTH);\n8:   }\n9: }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "swing swing 5",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "swing swing 10",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "Compiler error on line 2 of Chimp.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "Compiler error on line 5 of Chimp.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "Compiler error on line 6 of Chimp.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "Compiler error on line 7 of Chimp.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 85,
        "chapterId": 3,
        "type": 2,
        "statement": "Which are true of the following code? (Choose all that apply)\n1: public class Rope {\n2:   public static void swing() {\n3:     System.out.print(\"swing\"); \n4:  }\n5:  public void climb() {\n6:    System.out.println(\"climb \");\n7:  }\n8:  public static void play() {\n9:    swing();\n10:  climb(); \n11: }\n12: public static void main(String[] args) {\n13:   Rope rope = new Rope();\n14:   rope.play();\n15:   Rope rope2 = null;\n16:   rope2.play();\n17:  }\n18: }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "The code compiles as is.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "There is exactly one compiler error in the code.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "There are exactly two compiler errors in the code.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "If the lines with compiler errors are removed, the output is climb climb.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "If the lines with compiler errors are removed, the output is swing swing.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "If the lines with compile errors are removed, the code throws a NullPointerException.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 86,
        "chapterId": 3,
        "type": 1,
        "statement": "What is the output of the following code? import rope.*;\nimport static rope.Rope.*;\npublic class RopeSwing {\n  private static Rope rope1 = new Rope();\n  private static Rope rope2 = new Rope(); {\n   System.out.println(rope1.length); \n }public static void main(String[] args) { \n  rope1.length = 2;\n  rope2.length = 8;\n  System.out.println(rope1.length);\n  }\n}\n\npackage rope;\npublic class Rope {\npublic static int length = 0;\n}",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "02",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "08",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "2",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "8",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "The code does not compile.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "An exception is thrown.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 87,
        "chapterId": 3,
        "type": 1,
        "statement": "How many compiler errors are in the following code?\n1: public class RopeSwing {\n2:  private static final String leftRope;\n3:  private static final String rightRope;\n4:  private static final String bench;\n5:  private static final String name = \"name\";\n6:  static {\n7:    leftRope = \"left\";\n8:    rightRope = \"right\";\n9: }\n10: static {\n11:   name = \"name\";\n12:   rightRope = \"right\";\n13: }\n14: public static void main(String[] args) {\n15:   bench = \"bench\";\n16: }\n17: }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "0",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "1",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "2",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "3",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "4",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "5",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 88,
        "chapterId": 3,
        "type": 2,
        "statement": "Which of the following can replace line 2 to make this code compile? (Choose all that apply)\n1: import java.util.*;\n2: // INSERT CODE HERE\n3: public class Imports {\n4:  public void method(ArrayList<String> list) {\n5:   sort(list);\n6:  }\n7: }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "import static java.util.Collections;",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "import static java.util.Collections.*;",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "import static java.util.Collections.sort(ArrayList<String>);",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "static import java.util.Collections;",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "static import java.util.Collections.*;",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "static import java.util.Collections.sort(ArrayList<String>);",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 89,
        "chapterId": 3,
        "type": 1,
        "statement": "What is the result of the following statements?\n1: public class Test {\n2:   public void print(byte x) {\n3:     System.out.print(\"byte\");\n4:   }\n5:   public void print(int x) {\n6:     System.out.print(\"int\");\n7:   }\n8:   public void print(float x) {\n9:     System.out.print(\"float\");\n10:  }\n11:  public void print(Object x) {\n12:    System.out.print(\"Object\");\n13:  }\n14:  public static void main(String[] args) {\n15:    Test t = new Test();\n16:    short s = 123;\n17:    t.print(s);\n18:    t.print(true);\n19:    t.print(6.789);\n20:   }\n21: }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "bytefloatObject",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "intfloatObject",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "byteObjectfloat",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "intObjectfloat",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "intObjectObject",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "byteObjectObject",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 90,
        "chapterId": 3,
        "type": 1,
        "statement": "What is the result of the following program?\n1: public class Squares {\n2:   public static long square(int x) {\n3:     long y = x * (long) x;\n4:     x = -1;\n5:     return y;\n6:   }\n7:   public static void main(String[] args) {\n8:     int value = 9;\n9:     long result = square(value);\n10:    System.out.println(value);\n11: } }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "-1",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "9",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "81",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "Compiler error on line 9.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "Compiler error on a different line.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 91,
        "chapterId": 3,
        "type": 2,
        "statement": "Which of the following are output by the following code? (Choose all that apply) \npublic class StringBuilders {\n  public static StringBuilder work(StringBuilder a, StringBuilder b) {\n    a = new StringBuilder(\"a\"); b.append(\"b\");\n    return a;\n  }\n  public static void main(String[] args) {\n    StringBuilder s1 = new StringBuilder(\"s1\"); \n    StringBuilder s2 = new StringBuilder(\"s2\"); \n    StringBuilder s3 = work(s1, s2); \n    System.out.println(\"s1 = \" + s1); \n    System.out.println(\"s2 = \" + s2); \n    System.out.println(\"s3 = \" + s3);\n  } }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "s1 = a",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "s1 = s1",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "s2 = s2",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "s2 = s2b",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "s3 = a",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "s3 = null",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "The code does not compile.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 92,
        "chapterId": 3,
        "type": 2,
        "statement": "Which of the following are true? (Choose 2)",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "this() can be called from anywhere in a constructor.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "this() can be called from any instance method in the class.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "this.variableName can be called from any instance method in the class.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "this.variableName can be called from any static method in the class.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "You must include a default constructor in the code if the compiler does not include one.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "You can call the default constructor written by the compiler using this().",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "You can access a private constructor with the main() method.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 93,
        "chapterId": 3,
        "type": 2,
        "statement": "Which of these classes compile and use a default constructor? (Choose all that apply)",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "public class Bird { }",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "public class Bird { public bird() {} }",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "public class Bird { public bird(String name) {} }",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "public class Bird { public Bird() {} }",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "public class Bird { Bird(String name) {} }",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "public class Bird { private Bird(int age) {} }",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "public class Bird { void Bird() { }",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 94,
        "chapterId": 3,
        "type": 1,
        "statement": "Which code can be inserted to have the code print 2? public class BirdSeed {\n  private int numberBags; \n  boolean call;\n\n  public BirdSeed() { \n    // LINE 1\n    call = false;\n    // LINE 2\n  }\n  public BirdSeed(int numberBags) {\n    this.numberBags = numberBags;\n  }\n  public static void main(String[] args) {\n BirdSeed seed = new BirdSeed();\n    System.out.println(seed.numberBags);\n  } }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "Replace line 1 with BirdSeed(2);",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "Replace line 2 with BirdSeed(2);",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "Replace line 1 with new BirdSeed(2);",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "Replace line 2 with new BirdSeed(2);",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "Replace line 1 with this(2);",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "Replace line 2 with this(2);",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 95,
        "chapterId": 3,
        "type": 2,
        "statement": "Whichofthefollowingcompletetheconstructorsothatthiscodeprintsout50?(Choose all that apply)public class Cheetah {\n  int numSpots;\n  public Cheetah(int numSpots) {\n    // INSERT CODE HERE\n  }\n  public static void main(String[] args) {\n System.out.println(new Cheetah(50).numSpots);\n  } }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "numSpots = numSpots;",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "numSpots = this.numSpots;",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "this.numSpots = numSpots;",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "numSpots = super.numSpots;",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "super.numSpots = numSpots;",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "None of the above.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 96,
        "chapterId": 3,
        "type": 1,
        "statement": "What is the result of the following?\n1: public class Order {\n2: static String result = \"\";\n3: { result += \"c\"; }\n4: static\n5: { result += \"u\"; }\n6: { result += \"r\"; }\n7: }\n\n1: public class OrderDriver {\n2: public static void main(String[] args) {\n3: System.out.print(Order.result + \" \");\n4: System.out.print(Order.result + \" \");v5: new Order();v6: new Order();\n7: System.out.print(Order.result + \" \");\n8: }\n9: }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "curur",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "ucrcr",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "u ucrcr",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "u u curcur",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "u u ucrcr",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "ur ur urc",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "The code does not compile.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 97,
        "chapterId": 3,
        "type": 1,
        "statement": "What is the result of the following?\n1: public class Order {\n2:   String value = \"t\";\n3:   { value += \"a\"; }\n4:   { value += \"c\"; }\n5:   public Order() {\n6:   value += \"b\";\n7:   }\n8:   public Order(String s) {\n9:     value += s;\n10:  }\n11:  public static void main(String[] args) {\n12:    Order order = new Order(\"f\");\n13:    order = new Order();\n14:    System.out.println(order.value);\n15: } }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "tacb",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "tacf",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "tacbf",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "tacfb",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "tacftacb",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "The code does not compile.",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "An exception is thrown.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 98,
        "chapterId": 3,
        "type": 2,
        "statement": "Which of the following will compile when inserted in the following code? (Choose all that apply)\npublic class Order3 {\n  final String value1 = \"1\";\n  static String value2 = \"2\";\n  String value3 = \"3\";\n  {\n    // CODE SNIPPET 1\n  }\n  static {\n    // CODE SNIPPET 2\n  }\n }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "value1 = \"d\"; instead of // CODE SNIPPET 1",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "value2 = \"e\"; instead of // CODE SNIPPET 1",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "value3 = \"f\"; instead of // CODE SNIPPET 1",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "value1 = \"g\"; instead of // CODE SNIPPET 2",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "value2 = \"h\"; instead of // CODE SNIPPET 2",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "value3 = \"i\"; instead of // CODE SNIPPET 2",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 99,
        "chapterId": 3,
        "type": 2,
        "statement": "Which of the following are true about the following code? (Choose all that apply) \npublic class Create {\n  Create() {\n    System.out.print(\"1 \");\n  }\n  Create(int num) {\n    System.out.print(\"2 \");\n  }\n  Create(Integer num) {\n     System.out.print(\"3 \");\n  }\n  Create(Object num) {\n    System.out.print(\"4 \");\n   }\n  Create(int... nums) {\n     System.out.print(\"5 \");\n  }\n  public static void main(String[] args) {\n    new Create(100);\n    new Create(1000L);\n   }\n}",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "The code prints out 2 4.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "The code prints out 3 4.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "The code prints out 4 2.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "The code prints out 4 4.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "The code prints 3 4 if you remove the constructor Create(int num).",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "The code prints 4 4 if you remove the constructor Create(int num).",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "The code prints 5 4 if you remove the constructor Create(int num).",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 100,
        "chapterId": 3,
        "type": 1,
        "statement": "What is the result of the following class?\n1: import java.util.function.*;\n2:\n3: public class Panda {\n4:   int age;\n5:   public static void main(String[] args) {\n6:     Panda p1 = new Panda();\n7:     p1.age = 1;\n8:     check(p1, p -> p.age < 5);\n9:   }\n10:  private static void check(Panda panda, Predicate<Panda> pred) {\n11:    String result = pred.test(panda) ? \"match\" : \"not match\";\n12:    System.out.print(result);\n13: } }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "match",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "not match",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "Compiler error on line 8.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "Compiler error on line 10.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "Compiler error on line 11.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "A runtime exception is thrown.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 101,
        "chapterId": 3,
        "type": 1,
        "statement": "What is the result of the following code?\n1: interface Climb {\n2:   boolean isTooHigh(int height, int limit);\n3: }\n4:\n5: public class Climber {\n6:   public static void main(String[] args) {\n7:   check((h, l) -> h.append(l).isEmpty(), 5);\n8:   }\n9:   private static void check(Climb climb, int height) {\n10:     if (climb.isTooHigh(height, 10))\n11:       System.out.println(\"too high\");\n12:     else\n13:       System.out.println(\"ok\");\n14:   }\n15: }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "ok",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "too high",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "Compiler error on line 7.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "Compiler error on line 10.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "Compiler error on a different line.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "A runtime exception is thrown.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 102,
        "chapterId": 3,
        "type": 2,
        "statement": "Which of the following lambda expressions can fill in the blank? (Choose all that apply)\n List<String> list = new ArrayList<>();\nlist.removeIf(___________________);",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "s -> s.isEmpty()",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "s -> {s.isEmpty()}",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "s -> {s.isEmpty();}",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "s -> {return s.isEmpty();}",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "String s -> s.isEmpty()",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "(String s) -> s.isEmpty()",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 103,
        "chapterId": 3,
        "type": 2,
        "statement": "Which lambda can replace the MySecret class to return the same value? (Choose all that apply)\ninterface Secret {\n  String magic(double d);\n}\n\nclass MySecret implements Secret {\n  public String magic(double d) {\n    return \"Poof\";\n  }\n}",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "caller((e) -> \"Poof\");",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "caller((e) -> {\"Poof\"});",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "caller((e) -> { String e = \"\"; \"Poof\" });",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "caller((e) -> { String e = \"\"; return \"Poof\"; });",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "caller((e) -> { String e = \"\"; return \"Poof\" });",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "caller((e) -> { String f = \"\"; return \"Poof\"; });",
            "isCorrect": true
          }
        ]
      }
    ]
  },
  {
    "id": 4,
    "color": "#607d8b",
    "name": "Class Design",
    "summary": "<p class=\"p1\">&nbsp;</p><CENTER><h1 class=\"p1\" ><strong>Chapter 5 Summary</strong></h1></CENTER><CENTER><h1 class=\"p1\" ><h2 ><strong>Class Design&nbsp;</strong></h2></CENTER><p>This chapter took the basic class structure presented in Chapter 4 and expanded it by introducing the notion of inheritance. Java classes follow a multilevel <strong>single-inheritance</strong> pattern in which every class has exactly one direct parent class, with all classes eventually inheriting from <strong>java.lang.Object.</strong> Java interfaces simulate a limited form of multiple <strong>inheritance</strong>, since Java classes may implement multiple interfaces.<br />Inheriting a class gives you access to all of the public and protected methods of the class, but special rules for constructors and overriding methods must be followed or the code will not compile. For example, if the parent class doesn&rsquo;t include a no-argument constructor, an explicit call to a parent constructor must be provided in the child&rsquo;s constructors.<br />Pay close attention to the exam to any class that defines a constructor with arguments and doesn&rsquo;t define a no-argument constructor.<br />This Chapter reviewed <strong>overloaded</strong>, <strong>overridden</strong>, and<strong> hidden methods</strong> and showed how they differ,<br />especially in terms of <strong>polymorphism</strong>. and also introduced the notion of <strong>hiding variables</strong>, although the chapter strongly discourages this in practice as it often leads to confusing, difficult to maintain code.<br />The chapter introduced <strong>abstract classes</strong> and <strong>interfaces</strong> and showed how you can use them to define a platform for other developers to interact with. By definition, an abstract type cannot be instantiated directly and requires a concrete subclass for the code to be used. Since default and static interface methods are new to Java 8, expect to see at least one question<br />on them on the exam.</p>",
    "questions": [
      {
        "id": 104,
        "chapterId": 4,
        "type": 2,
        "statement": "What modifiers are implicitly applied to all interface methods? (Choose all that apply)",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "protected",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "public",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "static",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "void",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "abstract",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "default",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 105,
        "chapterId": 4,
        "type": 2,
        "statement": "What is the output of the following code?\n1: class Mammal {\n2:   public Mammal(int age) {\n3:     System.out.print(\"Mammal\");\n4:   }\n5: }\n6: public class Platypus extends Mammal {\n7:   public Platypus() {\n8:     System.out.print(\"Platypus\");\n9:   }\n10:  public static void main(String[] args) {\n11:    new Mammal(5);\n12:  }\n13: }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "Platypus",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "Mammal",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "PlatypusMammal",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "MammalPlatypus",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "The code will not compile because of line 8.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "The code will not compile because of line 11.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 106,
        "chapterId": 4,
        "type": 2,
        "statement": "Which of the following statements can be inserted in the blank line so that the code will compile successfully? (Choose all that apply)\npublic interface CanHop {}\npublic class Frog implements CanHop {\n  public static void main(String[] args) {\n    __________ frog = new TurtleFrog();\n  }\n}\npublic class BrazilianHornedFrog extends Frog {}\npublic class TurtleFrog extends Frog {}",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "Frog",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "TurtleFrog",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "BrazilianHornedFrog",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "CanHop",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "Object",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "Long",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 107,
        "chapterId": 4,
        "type": 2,
        "statement": "Which statement(s) are correct about the following code? (Choose all that apply)\npublic class Rodent {\n  protected static Integer chew() throws Exception {\n    System.out.println(\"Rodent is chewing\");\n    return 1;\n  }\n}\npublic class Beaver extends Rodent {\n  public Number chew() throws RuntimeException {\n    System.out.println(\"Beaver is chewing on wood\");\n    return 2;\n  }\n}",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "It will compile without issue.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "It fails to compile because the type of the exception the method throws is a subclass of the type of exception the parent method throws.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "It fails to compile because the return types are not covariant.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "It fails to compile because the method is protected in the parent class and public in the subclass.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "It fails to compile because of a static modifier mismatch between the two methods.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 108,
        "chapterId": 4,
        "type": 2,
        "statement": "Which of the following may only be hidden and not overridden? (Choose all that apply)",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "private instance methods",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "protected instance methods",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "public instance methods",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "static methods",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "public variables",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "private variables",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 109,
        "chapterId": 4,
        "type": 1,
        "statement": "Choose the correct statement about the following code:\n1: interface HasExoskeleton {\n2: abstract int getNumberOfSections();\n3: }\n4: abstract class Insect implements HasExoskeleton {\n5: abstract int getNumberOfLegs();\n6: }\n7: public class Beetle extends Insect {\n8: int getNumberOfLegs() { return 6; }\n9: }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "It compiles and runs without issue.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "The code will not compile because of line 2.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "The code will not compile because of line 4.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "The code will not compile because of line 7.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "It compiles but throws an exception at runtime.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 110,
        "chapterId": 4,
        "type": 2,
        "statement": "Which of the following statements about polymorphism are true? (Choose all that apply)",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "A reference to an object may be cast to a subclass of the object without an explicit cast.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "If a method takes a superclass of three objects, then any of those classes may be passed as a parameter to the method.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "A method that takes a parameter with type java.lang.Object will take any reference.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "All cast exceptions can be detected at compile-time.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "By defining a public instance method in the superclass, you guarantee that the specific method will be called in the parent class at runtime.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 111,
        "chapterId": 4,
        "type": 1,
        "statement": "Choose the correct statement about the following code:\n1: public interface Herbivore {\n2:   int amount = 10;\n3:   public static void eatGrass();\n4:   public int chew() {\n5:     return 13;\n6:   }\n7: }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "It compiles and runs without issue.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "The code will not compile because of line 2.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "The code will not compile because of line 3.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "The code will not compile because of line 4.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "The code will not compile because of lines 2 and 3.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "The code will not compile because of lines 3 and 4.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 112,
        "chapterId": 4,
        "type": 1,
        "statement": "Choose the correct statement about the following code:\n1: public interface CanFly {\n2:   void fly();\n3: }\n4: interface HasWings {\n5:   public abstract Object getWindSpan();\n6: }\n7: abstract class Falcon implements CanFly, HasWings {\n8: }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "It compiles without issue.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "The code will not compile because of line 2.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "The code will not compile because of line 4.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "The code will not compile because of line 5.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "The code will not compile because of lines 2 and 5.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "The code will not compile because the class Falcon doesn’t implement the interface methods.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 113,
        "chapterId": 4,
        "type": 2,
        "statement": "Which statements are true for both abstract classes and interfaces? (Choose all that apply)",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "All methods within them are assumed to be abstract.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "Both can contain public static final variables.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "Both can be extended using the extend keyword.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "Both can contain default methods.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "Both can contain static methods.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "Neither can be instantiated directly.",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "Both inherit java.lang.Object.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 114,
        "chapterId": 4,
        "type": 2,
        "statement": "What modifiers are assumed for all interface variables? (Choose all that apply)",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "public",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "protected",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "private",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "static",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "final",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "abstract",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 115,
        "chapterId": 4,
        "type": 1,
        "statement": "What is the output of the following code?\n1: interface Nocturnal {\n2:   default boolean isBlind() { return true; }\n3: }\n4: public class Owl implements Nocturnal {\n5: public boolean isBlind() { return false; }\n6: public static void main(String[] args) {\n7:   Nocturnal nocturnal = (Nocturnal)new Owl();\n8:   System.out.println(nocturnal.isBlind());\n9: }\n10: }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "true",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "false",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "The code will not compile because of line 2.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "The code will not compile because of line 5.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "The code will not compile because of line 7.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "The code will not compile because of line 8.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 116,
        "chapterId": 4,
        "type": 1,
        "statement": "What is the output of the following code?\n1: class Arthropod {\n2: public void printName(double input) { System.out .print(\"Arthropod\"); }\n3: }\n4: public class Spider extends Arthropod {\n5:   public void printName(int input) { System.out.print(\"Spider\"); }\n6:   public static void main(String[] args) {\n7:     Spider spider = new Spider();\n8:     spider.printName(4);\n9:     spider.printName(9.0);\n10:   }\n11: }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "SpiderArthropod",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "ArthropodSpider",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "SpiderSpider",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "ArthropodArthropod",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "The code will not compile because of line 5.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "The code will not compile because of line 9.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 117,
        "chapterId": 4,
        "type": 2,
        "statement": "Which statements are true about the following code? (Choose all that apply)\n1: interface HasVocalCords {\n2:   public abstract void makeSound();\n3: }\n4: public interface CanBark extends HasVocalCords {\n5:   public void bark();\n6: }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "The CanBark interface doesn’t compile.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "A class that implements HasVocalCords must override the makeSound() method.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "A class that implements CanBark inherits both the makeSound() and bark() methods.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "A class that implements CanBark only inherits the bark() method.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "An interface cannot extend another interface.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 118,
        "chapterId": 4,
        "type": 2,
        "statement": "Which of the following is true about a concrete subclass? (Choose all that apply)",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "A concrete subclass can be declared as abstract.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "A concrete subclass must implement all inherited abstract methods.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "A concrete subclass must implement all methods defined in an inherited interface.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "A concrete subclass cannot be marked as final.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "Abstract methods cannot be overridden by a concrete subclass.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 119,
        "chapterId": 4,
        "type": 1,
        "statement": "What is the output of the following code?\n1: abstract class Reptile {\n2:   public final void layEggs() { System.out.println(\"Reptile laying eggs\");}\n3:   public static void main(String[] args) {\n4:     Reptile reptile = new Lizard();\n5:     reptile.layEggs();\n6:   }\n7: }\n8: public class Lizard extends Reptile {\n9:   public void layEggs() { System.out.println(\"Lizard laying eggs\"); }\n10: }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "Reptile laying eggs",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "Lizard laying eggs",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "The code will not compile because of line 4.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "The code will not compile because of line 5.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "The code will not compile because of line 9.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 120,
        "chapterId": 4,
        "type": 1,
        "statement": "What is the output of the following code?\n1: public abstract class Whale {\n2:   public abstract void dive() {};\n3:   public static void main(String[] args) {\n4:     Whale whale = new Orca();\n5:     whale.dive();\n6:   }\n7: }\n8: class Orca extends Whale {\n9:   public void dive(int depth) { System.out.println(\"Orca diving\"); } \n10: }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "Orca diving",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "The code will not compile because of line 2.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "The code will not compile because of line 8.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "The code will not compile because of line 9.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "The output cannot be determined from the code provided.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 121,
        "chapterId": 4,
        "type": 2,
        "statement": "What is the output of the following code? (Choose all that apply)\n1: interface Aquatic {\n2:   public default int getNumberOfGills(int input) { return 2; }\n3: }\n4: public class ClownFish implements Aquatic {\n5:   public String getNumberOfGills() { return \"4\"; }\n6:   public String getNumberOfGills(int input) { return \"6\"; }\n7:   public static void main(String[] args) {\n8:     System.out.println(new ClownFish().getNumberOfGills(-1));\n9:   }\n10: }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "2",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "4",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "6",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "The code will not compile because of line 5.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "The code will not compile because of line 6.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "The code will not compile because of line 8.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 122,
        "chapterId": 4,
        "type": 2,
        "statement": "Which of the following statements can be inserted in the blank so that the code will compile successfully? (Choose all that apply)\npublic class Snake {}\npublic class Cobra extends Snake {}\n public class GardenSnake {}\npublic class SnakeHandler {\nprivate Snake snake;\npublic void setSnake(Snake snake) { this.snake = snake; }\npublic static void main(String[] args) {\nnew SnakeHandler().setSnake(_______);\n}\n}",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "new Cobra()",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "new GardenSnake()",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "new Snake()",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "new Object()",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "new String(\"Snake\")",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "null",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 123,
        "chapterId": 4,
        "type": 1,
        "statement": "What is the result of the following code?\n1: public abstract class Bird {\n2:   private void fly() { System.out.println(\"Bird is flying\"); }\n3:   public static void main(String[] args) {\n4:     Bird bird = new Pelican();\n5:     bird.fly();\n6:   }\n7: }\n8: class Pelican extends Bird {\n9:   protected void fly() { System.out.println(\"Pelican is flying\"); }\n10: }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "Bird is flying",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "Pelican is flying",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "The code will not compile because of line 4.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "The code will not compile because of line 5.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "The code will not compile because of line 9.",
            "isCorrect": true
          }
        ]
      }
    ]
  },
  {
    "id": 5,
    "color": "#7b1fa2",
    "name": "Exceptions",
    "summary": "<p class=\"p1\">&nbsp;</p><CENTER><h1 class=\"p1\" ><strong>Chapter 6 Summary</strong></h1></CENTER><CENTER><h1 class=\"p1\" ><h2 ><strong>Exceptions&nbsp;</strong></h2></CENTER><p>An exception indicates something unexpected happened. A method can handle an exception<br />by catching it or declaring it for the caller to deal with. Many exceptions are thrown<br />by Java libraries. You can throw your own exception with code such as throw new <strong>Exception()</strong>.<br />Subclasses of java.lang.Error are exceptions that a programmer should not attempt to handle. Subclasses of java.lang.RuntimeException are runtime (unchecked) exceptions.<br />Subclasses of <strong>java.lang.Exception</strong>, but not <strong>java.lang.RuntimeException</strong> are checked exceptions. Java requires checked exceptions to be handled or declared.<br />If a try statement has multiple catch blocks, at most one catch block can run. Java looks for an exception that can be caught by each catch block in the order they appear, and the first match is run. Then execution continues after the try statement. If both catch and finally throw an exception, the one from finally gets thrown. <br />Common runtime exceptions include:</p><p class=\"p1\"><span class=\"s1\">■ </span><em><strong>ArithmeticException</strong></em></p><p class=\"p1\"><span class=\"s1\">■ </span><em><strong>ArrayIndexOutOfBoundsException</strong></em></p><p class=\"p1\"><span class=\"s1\">■ </span><em><strong>ClassCastException</strong></em></p><p class=\"p1\"><span class=\"s1\">■ </span><em><strong>IllegalArgumentException</strong></em></p><p class=\"p1\"><span class=\"s1\">■ </span><em><strong>NullPointerException</strong></em></p><p class=\"p1\"><span class=\"s1\">■ </span><em><strong>NumberFormatException</strong></em></p><p class=\"p1\"><strong>IllegalArgumentException</strong> and NumberFormatException are typically thrown by the programmer, whereas the others are typically thrown by the JVM.<br />Common checked exceptions include:</p><p class=\"p1\"><span class=\"s1\">■ </span><em><strong>IOException</strong></em></p><p class=\"p1\"><span class=\"s1\">■ </span><em><strong>FileNotFoundException</strong></em></p><p class=\"p2\">Common errors include:</p><p class=\"p1\"><span class=\"s1\">■ </span><em><strong>ExceptionInInitializerError</strong></em></p><p class=\"p1\"><span class=\"s1\">■ </span><em><strong>StackOverflowError</strong></em></p><p class=\"p1\"><span class=\"s1\">■ </span><em><strong>NoClassDefFoundError</strong></em></p><p class=\"p1\">When a method overrides a method in a superclass or interface, it is not allowed to add checked exceptions. It is allowed to declare fewer exceptions or declare a subclass of a declared exception. Methods declare exceptions with the keyword throws.</p>  ",
    "questions": [
      {
        "id": 124,
        "chapterId": 5,
        "type": 2,
        "statement": "Which of the following statements are true? (Choose all that apply)",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "Runtime exceptions are the same thing as checked exceptions.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "Runtime exceptions are the same thing as unchecked exceptions.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "You can declare only checked exceptions.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "You can declare only unchecked exceptions.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "You can handle only Exception subclasses.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 125,
        "chapterId": 5,
        "type": 2,
        "statement": "Which of the following pairs fill in the blanks to make this code compile? (Choose all that apply)\n7: public void ohNo() _____ Exception {\n8: _____________ Exception();\n 9: }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "On line 7, fill in throw",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "On line 7, fill in throws",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "On line 8, fill in throw",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "On line 8, fill in throw new",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "On line 8, fill in throws",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "On line 8, fill in throws new",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 126,
        "chapterId": 5,
        "type": 1,
        "statement": "When are you required to use a finally block in a regular try statement (not a try-with- resources)?",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "Never",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "When the program code doesn’t terminate on its own.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "When there are no catch blocks in a try statement.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "When there is exactly one catch block in a try statement.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "When there are two or more catch blocks in a try statement.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 127,
        "chapterId": 5,
        "type": 2,
        "statement": "Which exception will the following throw?\nObject obj = new Integer(3);\nString str = (String) obj;\nSystem.out.println(str);",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "ArrayIndexOutOfBoundsException",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "ClassCastException",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "IllegalArgumentException",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "NumberFormatException",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "None of the above.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 128,
        "chapterId": 5,
        "type": 2,
        "statement": "Which of the following exceptions are thrown by the JVM? (Choose all that apply)",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "ArrayIndexOutOfBoundsException",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "ExceptionInInitializerError",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "java.io.IOException",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "NullPointerException",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "NumberFormatException",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 129,
        "chapterId": 5,
        "type": 1,
        "statement": "What will happen if you add the statement System.out.println(5 / 0); to a working main() method?",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "It will not compile.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "It will not run.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "It will run and throw an ArithmeticException.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "It will run and throw an IllegalArgumentException.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "None of the above.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 130,
        "chapterId": 5,
        "type": 2,
        "statement": "What is printed besides the stack trace caused by the NullPointerException from line 16?\n1: public class DoSomething {\n2:   public void go() {\n3:     System.out.print(\"A\");\n4:     try {\n5:       stop();\n6:     } catch (ArithmeticException e) {\n7:       System.out.print(\"B\");\n8:     } finally {\n9:       System.out.print(\"C\");\n10:    }\n11:    System.out.print(\"D\");\n12:  }\n13:  public void stop() {\n14:    System.out.print(\"E\");\n15:    Object x = null;\n16:    x.toString();\n17:    System.out.print(\"F\");\n18:  }\n19:  public static void main(String[] args) {\n20:    new DoSomething().go();\n21:  }\n22: }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "AE",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "AEBCD",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "AEC",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "AECD",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "No output appears other than the stack trace.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 131,
        "chapterId": 5,
        "type": 1,
        "statement": "What is the output of the following snippet, assuming a and b are both 0?\n3: try {\n4:   return a / b;\n5: } catch (RuntimeException e) {\n6:   return -1;\n7: } catch (ArithmeticException e) {\n8:   return 0;\n9: } finally {\n10:  System.out.print(\"done\");\n11: }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "-1",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "0",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "done-1",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "done0",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "The code does not compile.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "An uncaught exception is thrown.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 132,
        "chapterId": 5,
        "type": 2,
        "statement": "What is the output of the following program?\n1: public class Laptop { \n2:   public void start() {\n3:     try {\n4:       System.out.print(\"Starting up \");\n5:       throw new Exception();\n6:     } catch (Exception e) {\n7:       System.out.print(\"Problem \");\n8:       System.exit(0);\n9:     } finally {\n10:      System.out.print(\"Shutting down \");\n11:    }\n12:   }\n13:   public static void main(String[] args) {\n14:     new Laptop().start();\n15: } }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "Starting up",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "Starting up Problem",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "Starting up Problem Shutting down",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "Starting up Shutting down",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "The code does not compile.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "An uncaught exception is thrown.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 133,
        "chapterId": 5,
        "type": 1,
        "statement": "What is the output of the following program?\n1: public class Dog {\n2:   public String name;\n3:   public void parseName() {\n4:     System.out.print(\"1\");\n5:     try {\n6:       System.out.print(\"2\");\n7:       int x = Integer.parseInt(name);\n8:       System.out.print(\"3\");\n9:     } catch (NumberFormatException e) {\n10:      System.out.print(\"4\");\n11:    }\n12:   }\n13:   public static void main(String[] args) {\n14:     Dog leroy = new Dog();\n15:     leroy.name = \"Leroy\"\n16:     leroy.parseName();\n17:     System.out.print(\"5\")\n18: } }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "12",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "1234",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "1235",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "124",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "1245",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "The code does not compile.",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "An uncaught exception is thrown.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 134,
        "chapterId": 5,
        "type": 2,
        "statement": "What is the output of the following program?\n1: public class Cat {\n2:   public String name;\n3:   public void parseName() {\n4:     System.out.print(\"1\");\n5:     try {\n6:       System.out.print(\"2\");\n7:       int x = Integer.parseInt(name);\n8:       System.out.print(\"3\");\n9:     } catch (NullPointerException e) {\n10:      System.out.print(\"4\");\n11:    }\n12:    System.out.print(\"5\");\n13:  }\n14:  public static void main(String[] args) {\n15:    Cat leo = new Cat();\n16:    leo.name = \"Leo\";\n17:    leo.parseName();\n18:    System.out.print(\"6\");\n19:  }\n20: }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "12, followed by a stack trace for a NumberFormatException",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "124, followed by a stack trace for a NumberFormatException",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "12456",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "12456",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "1256, followed by a stack trace for a NumberFormatException",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "The code does not compile.",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "An uncaught exception is thrown",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 135,
        "chapterId": 5,
        "type": 1,
        "statement": "What is printed by the following? (Choose all that apply)\n1: public class Mouse {\n2:   public String name;\n3:   public void run() {\n4:     System.out.print(\"1\");\n5:     try {\n6:       System.out.print(\"2\");\n7:       name.toString();\n8:       System.out.print(\"3\");\n9:     } catch (NullPointerException e) {\n10:      System.out.print(\"4\");\n11:      throw e;\n12:    }\n13:    System.out.print(\"5\");\n14:   }\n15:   public static void main(String[] args) {\n16:     Mouse jerry = new Mouse();\n17:     jerry.run();\n18:     System.out.print(\"6\");\n19: } }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "1",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "2",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "3",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "4",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "5",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "6",
            "isCorrect": true
          },
          {
            "id": 6,
            "answer": "The stack trace for a NullPointerException",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 136,
        "chapterId": 5,
        "type": 2,
        "statement": "Which of the following statements are true? (Choose all that apply)",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "You can declare a method with Exception as the return type.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "You can declare any subclass of Error in the throws part of a method declaration.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "You can declare any subclass of Exception in the throws part of a method declaration.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "You can declare any subclass of Object in the throws part of a method declaration.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "You can declare any subclass of RuntimeException in the throws part of a method declaration.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 137,
        "chapterId": 5,
        "type": 2,
        "statement": "Which of the following can be inserted on line 8 to make this code compile? (Choose all that apply)\n7: public void ohNo() throws IOException {)\n8: // INSERT CODE HERE)\n9: }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "System.out.println(\"it's ok\");",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "throw new Exception();",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "throw new IllegalArgumentException();",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "throw new java.io.IOException();",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "throw new RuntimeException();",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 138,
        "chapterId": 5,
        "type": 2,
        "statement": "Which of the following are unchecked exceptions? (Choose all that apply)",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "ArrayIndexOutOfBoundsException",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "IllegalArgumentException",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "IOException",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "NumberFormatException",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "Any exception that extends RuntimeException",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "Any exception that extends Exception",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 139,
        "chapterId": 5,
        "type": 1,
        "statement": "Which scenario is the best use of an exception?",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "An element is not found when searching a list.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "An unexpected parameter is passed into a method.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "The computer caught fire.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "You want to loop through a list.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "You don’t know how to code a method.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 140,
        "chapterId": 5,
        "type": 2,
        "statement": "Which of the following can be inserted into Lion to make this code compile? (Choose all that apply)\nclass HasSoreThroatException extends Exception {}\nclass TiredException extends RuntimeException {}\ninterface Roar {\nvoid roar() throws HasSoreThroatException;\n}\nclass Lion implements Roar {// INSERT CODE HERE\n}",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "public void roar(){}",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "public void roar() throws Exception{}",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "public void roar() throws HasSoreThroatException{}",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "public void roar() throws IllegalArgumentException{}",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "public void roar() throws TiredException{}",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 141,
        "chapterId": 5,
        "type": 2,
        "statement": "Which of the following are true? (Choose all that apply)",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "Checked exceptions are allowed to be handled or declared.",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "Checked exceptions are required to be handled or declared.",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "Errors are allowed to be handled or declared.",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "Errors are required to be handled or declared.",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "Runtime exceptions are allowed to be handled or declared.",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "Runtime exceptions are required to be handled or declared.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 142,
        "chapterId": 5,
        "type": 2,
        "statement": "Which of the following can be inserted in the blank to make the code compile? (Choose all that apply)\npublic static void main(String[] args) {\ntry {\nSystem.out.println(\"work real hard\");\n} catch (______ e) {\n} catch (RuntimeException e) {\n}\n}",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "Exception",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "IOException",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "IllegalArgumentException",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "RuntimeException",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "StackOverflowError",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "None of the above.",
            "isCorrect": true
          }
        ]
      },
      {
        "id": 143,
        "chapterId": 5,
        "type": 2,
        "statement": "What does the output of the following contain? (Choose all that apply)\n12: public static void main(String[] args) {\n13:   System.out.print(\"a\");\n14:   try {\n15:     System.out.print(\"b\");\n16:     throw new IllegalArgumentException();\n17:   } catch (IllegalArgumentException e) {\n18:     System.out.print(\"c\");\n19:     throw new RuntimeException(\"1\");\n20:   } catch (RuntimeException e) {\n21:     System.out.print(\"d\");\n22:     throw new RuntimeException(\"2\");\n23:   } finally {\n24:     System.out.print(\"e\");\n25:     throw new RuntimeException(\"3\");\n26:   }\n27: }",
        "explanation": "meh",
        "isFavorite": false,
        "answers": [
          {
            "id": 0,
            "answer": "abce",
            "isCorrect": true
          },
          {
            "id": 1,
            "answer": "abde",
            "isCorrect": true
          },
          {
            "id": 2,
            "answer": "An exception with the message set to \"1\"",
            "isCorrect": true
          },
          {
            "id": 3,
            "answer": "An exception with the message set to \"2\"",
            "isCorrect": true
          },
          {
            "id": 4,
            "answer": "An exception with the message set to \"3\"",
            "isCorrect": true
          },
          {
            "id": 5,
            "answer": "Nothing; the code does not compile.",
            "isCorrect": true
          }
        ]
      }
    ]
  }
]